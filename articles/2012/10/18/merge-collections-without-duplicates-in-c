<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Merge collections without duplicates in C#</title>
  <meta name="viewport" content="width=device-width; initial-scale=1.0;">
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../../../xml/rsd" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="../../../../xml/atom/article/9315/feed.xml" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="../../../../xml/rss20/article/9315/feed.xml" />
  <script src="../../../../javascripts/cookies.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/prototype.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/effects.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/typo.js?1170454372" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="../../../../stylesheets/theme/application.css?1357773761" media="all" rel="Stylesheet" type="text/css" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-4453587-1");
pageTracker._trackPageview();
} catch(err) {}
</script>
</head>

<body>
<div id="container">
  <div id="header">
    <h1><span><a href="../../../../index.html">Alice, Bob, and Mallory</a></span></h1>
    <h2>metasyntactics</h2>
  </div>

  <div id="page">
    <div id="content">
      <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="Merge collections without duplicates in C#"
    dc:identifier="http://alicebobandmallory.com/articles/2012/10/18/merge-collections-without-duplicates-in-c"
    dc:description="Your task is to merge two lists of objects. The resulting collection should be without duplicates, based on a certain property on the objects. The lists are populated with very simple Person objects. &lt;td class="
    dc:creator="jonelf"
    dc:date="2013-01-09T10:43:02+01:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="http://alicebobandmallory.com/admin/content/edit/9315" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>Merge collections without duplicates in C#</h2>
  <p class="auth">Posted by Jonas Elfstr√∂m
  <span class="typo_date" title="Thu, 18 Oct 2012 21:28:00 GMT">Thu, 18 Oct 2012 21:28:00 GMT</span></p>
  <p>Your task is to merge two lists of objects. The resulting collection should be without duplicates, based on a certain property on the objects.</p>

<p>The lists are populated with very simple Person objects.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="merge-collections-without-duplicates-in-c#n1" name="n1">1</a>
<a href="merge-collections-without-duplicates-in-c#n2" name="n2">2</a>
<a href="merge-collections-without-duplicates-in-c#n3" name="n3">3</a>
<a href="merge-collections-without-duplicates-in-c#n4" name="n4">4</a>
<a href="merge-collections-without-duplicates-in-c#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>class Person
{
        public <span style="color:#0a5;font-weight:bold">int</span> Number { get; set; }
        public string Name { get; set; }
}</pre></td>
</tr></table>

<p><br>
C# programmers often turn to LINQ, and they should! With LINQ you could end up with something like this:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="merge-collections-without-duplicates-in-c#n1" name="n1">1</a>
<a href="merge-collections-without-duplicates-in-c#n2" name="n2">2</a>
<a href="merge-collections-without-duplicates-in-c#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>var merged = new List&lt;Person&gt;(list1);
merged.AddRange(list2.Where(p2 =&gt; 
                list1.All(p1 =&gt; p1.Number != p2.Number)));</pre></td>
</tr></table>

<p><br>
It's not all that obvious how it works and it also has performance problems. This solution has to iterate over <code>list1</code> for every object in <code>list2</code>. Not every object every time but on average half of them (if the lists contains no duplicates within themselves). If the lists contains a 1000 objects each there's a good chance that <code>list1</code> will be iterated 500.000 times. That kind of work does not come for free.</p>

<p>We need to get rid of this nested looping. I was pretty sure a dictionary based solution would do the trick.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="merge-collections-without-duplicates-in-c#n1" name="n1">1</a>
<a href="merge-collections-without-duplicates-in-c#n2" name="n2">2</a>
<a href="merge-collections-without-duplicates-in-c#n3" name="n3">3</a>
<a href="merge-collections-without-duplicates-in-c#n4" name="n4">4</a>
<a href="merge-collections-without-duplicates-in-c#n5" name="n5">5</a>
<a href="merge-collections-without-duplicates-in-c#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre>var dict = list2.ToDictionary(p =&gt; p.Number);
foreach (var person in list1)
{
        dict[person.Number] = person;
}
var merged = dict.Values.ToList();</pre></td>
</tr></table>

<p><br>
This solution converts <code>list2</code> to a dictionary and then it loops a single time over <code>list1</code>. It either adds to the dictionary or replaces the value of <code>list2</code> if it was a duplicate. This seemed to be a much more efficient algorithm.</p>

<p>In C# there's not just <a href="http://msdn.microsoft.com/en-us/library/xfhwa508.aspx">Dictionary&lt;TKey, TValue></a> but we also have <a href="http://msdn.microsoft.com/en-us/library/bb359438.aspx">HashSet</a>. A HashSet is a collection that contains no duplicates. It also has the <code>UnionWith</code> method and that is exactly what we are looking for. The problem is that it compares object to object and we want to compare based on a property.</p>

<p>Fortunately the HashSet methods honors the default equality comparer. Such a beast could look like this.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="merge-collections-without-duplicates-in-c#n1" name="n1">1</a>
<a href="merge-collections-without-duplicates-in-c#n2" name="n2">2</a>
<a href="merge-collections-without-duplicates-in-c#n3" name="n3">3</a>
<a href="merge-collections-without-duplicates-in-c#n4" name="n4">4</a>
<a href="merge-collections-without-duplicates-in-c#n5" name="n5">5</a>
<a href="merge-collections-without-duplicates-in-c#n6" name="n6">6</a>
<a href="merge-collections-without-duplicates-in-c#n7" name="n7">7</a>
<a href="merge-collections-without-duplicates-in-c#n8" name="n8">8</a>
<a href="merge-collections-without-duplicates-in-c#n9" name="n9">9</a>
<strong><a href="merge-collections-without-duplicates-in-c#n10" name="n10">10</a></strong>
<a href="merge-collections-without-duplicates-in-c#n11" name="n11">11</a>
<a href="merge-collections-without-duplicates-in-c#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>class PersonComparer : IEqualityComparer&lt;Person&gt;
{
        public <span style="color:#0a5;font-weight:bold">bool</span> Equals(Person p1, Person p2)
        {
                <span style="color:#080;font-weight:bold">return</span> p1.Number == p2.Number;
        }

        public <span style="color:#0a5;font-weight:bold">int</span> GetHashCode(Person p)
        {
                <span style="color:#080;font-weight:bold">return</span> p.Number;
        }
}</pre></td>
</tr></table>

<p><br>
Then just add it as the second parameter to the constructor.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="merge-collections-without-duplicates-in-c#n1" name="n1">1</a>
<a href="merge-collections-without-duplicates-in-c#n2" name="n2">2</a>
<a href="merge-collections-without-duplicates-in-c#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>var hs = new HashSet&lt;Person&gt;(list1, new PersonComparer());
hs.UnionWith(list2);
var merged = hs.ToList();</pre></td>
</tr></table>

<p><br>
<img src="https://dl.dropbox.com/u/26840/union_venn_diagram.png" style="display: inline-block; float:right">
Set theory tells us that this merging is actually  a union of the two sets (without duplicates) and   LINQ happens to have a <code>Union</code> method.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>var merged = list1.Union(list2, new PersonComparer());</pre></td>
</tr></table>

<p><br>
By that we've come full circle and it's time to see how the different solutions performs. I wrote a small <a href="https://gist.github.com/3916414">test program</a> that creates two lists of objects with 1000 objects in each. In each list 500 of the objects property, that we base the merge on, has the same value.</p>

<pre>
Lists and LINQ merge: 4820ms
Dictionary merge: 16ms
HashSet and IEqualityComparer: 20ms
LINQ Union and IEqualityComparer: 24ms
</pre>

<p>The first solution is, in this case, 300 times slower than the fastest one! </p>

<p>I prefer LINQ Union because it communicates intent very clearly.</p>
</div>
<p class="meta">
  Posted in <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a>
</p>



<p class="postmetadata alt">
  <small>
  <a href="../../../../xml/rss20/article/9315/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>


<p>Comments are closed</p>
<!--
  <p>Comments are disabled</p>
-->

      <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
    </div>

    <div id="sidebar">
      <!-- search -->
      <div id="search" class="search">
<!--	<form action="/articles/search" id="sform" method="get">
	  <p><input type="text" id="q" name="q" value="" /></p>
	</form>
	
	<div id="loading" class="loading" style="display:none;">Searching...</div>
	<div id="results" class="results"></div>
  <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('loading')}, onLoading:function(request){Element.show('loading')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script>
-->
</div>


      <!-- sidebar components -->
      
      
<div class="sidebar-node">
  <h3></h3>
<a href="http://stackoverflow.com/users/44620/jonas-elfstrom">
<img src="http://stackoverflow.com/users/flair/44620.png" width="208" height="58" alt="Stack Overflow profile for Jonas Elfstr√∂m" title="Stack Overflow profile for Jonas Elfstr√∂m">
</a>
<ul>
<li><nobr><a href="../../../../pages/AboutMe">About me</a>/<a href="../../../../pages/OmMig">Om mig</a></nobr></li>
</ul>
<a href="https://gist.github.com/jonelf">Public Gists</a><br><a href="http://jonelf.posterous.com/">Posterous</a><br><br>
<b>Recommended reading</b><br/><a href="http://www.amazon.com/gp/product/0385495323?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385495323">The Code Book</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385495323" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/>
<a href="http://www.amazon.com/gp/product/0385493622?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385493622">Fermat's Enigma</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385493622" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0399156828?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0399156828">Zero History</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0399156828" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0470474246?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0470474246">Cryptography Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0470474246" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/><br/>

</div>


  


    </div>
    <br style="clear:both;" />
  </div>

  <div id="footer">
    <hr />
    <p><a href="../../../../index.html">Alice, Bob, and Mallory</a></p>
    <ul>
      <li>powered by <a href="http://typosphere.org">typo</a> /
          styled with <a href="http://quotedprintable.com/pages/scribbish">scribbish</a></li>
    </ul>
  </div>
</div>
</body>
</html>
