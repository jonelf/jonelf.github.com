<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Breaking simple ciphers</title>
  <meta name="viewport" content="width=device-width; initial-scale=1.0;">
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../../../xml/rsd" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="../../../../xml/atom/article/3604/feed.xml" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="../../../../xml/rss20/article/3604/feed.xml" />
  <script src="../../../../javascripts/cookies.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/prototype.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/effects.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/typo.js?1170454372" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="../../../../stylesheets/theme/application.css?1357773761" media="all" rel="Stylesheet" type="text/css" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-4453587-1");
pageTracker._trackPageview();
} catch(err) {}
</script>
</head>

<body>
<div id="container">
  <div id="header">
    <h1><span><a href="../../../../index.html">Alice, Bob, and Mallory</a></span></h1>
    <h2>metasyntactics</h2>
  </div>

  <div id="page">
    <div id="content">
      <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="Breaking simple ciphers"
    dc:identifier="http://alicebobandmallory.com/articles/2009/09/16/breaking-simple-ciphers"
    dc:description="The last few days I've happened to stumble over a couple of ciphers and I just couldn't help myself from trying to break them. The Lost Symbol Dan Brown has a new book coming out and part of the promotion is this cipher text &quot;AOFACFSO"
    dc:creator="jonelf"
    dc:date="2011-03-23T00:10:46+01:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="http://alicebobandmallory.com/admin/content/edit/3604" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>Breaking simple ciphers</h2>
  <p class="auth">Posted by Jonas Elfstr√∂m
  <span class="typo_date" title="Wed, 16 Sep 2009 18:19:00 GMT">Wed, 16 Sep 2009 18:19:00 GMT</span></p>
  <p>The last few days I've happened to stumble over a couple of ciphers and I just couldn't help myself from trying to break them.</p>

<h3>The Lost Symbol</h3>

<p>Dan Brown has a new book coming out and part of the promotion is this  cipher text "AOFACFSOA FSZWBEIC EIOA ZOHSFWQWOA OQQSDW". 
The WQW, QQ and three of the words ending with an A made me believe we could be dealing with a substitution cipher and maybe even a Caesar cipher, the most simple of them all.</p>

<p>My usual tool of choice is Ruby and in this case the splendid Interactive Ruby Shell.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="breaking-simple-ciphers#n1" name="n1">1</a>
<a href="breaking-simple-ciphers#n2" name="n2">2</a>
<a href="breaking-simple-ciphers#n3" name="n3">3</a>
<a href="breaking-simple-ciphers#n4" name="n4">4</a>
<a href="breaking-simple-ciphers#n5" name="n5">5</a>
<a href="breaking-simple-ciphers#n6" name="n6">6</a>
<a href="breaking-simple-ciphers#n7" name="n7">7</a>
<a href="breaking-simple-ciphers#n8" name="n8">8</a>
<a href="breaking-simple-ciphers#n9" name="n9">9</a>
<strong><a href="breaking-simple-ciphers#n10" name="n10">10</a></strong>
<a href="breaking-simple-ciphers#n11" name="n11">11</a>
<a href="breaking-simple-ciphers#n12" name="n12">12</a>
<a href="breaking-simple-ciphers#n13" name="n13">13</a>
<a href="breaking-simple-ciphers#n14" name="n14">14</a>
<a href="breaking-simple-ciphers#n15" name="n15">15</a>
<a href="breaking-simple-ciphers#n16" name="n16">16</a>
<a href="breaking-simple-ciphers#n17" name="n17">17</a>
<a href="breaking-simple-ciphers#n18" name="n18">18</a>
<a href="breaking-simple-ciphers#n19" name="n19">19</a>
<strong><a href="breaking-simple-ciphers#n20" name="n20">20</a></strong>
<a href="breaking-simple-ciphers#n21" name="n21">21</a>
<a href="breaking-simple-ciphers#n22" name="n22">22</a>
<a href="breaking-simple-ciphers#n23" name="n23">23</a>
<a href="breaking-simple-ciphers#n24" name="n24">24</a>
<a href="breaking-simple-ciphers#n25" name="n25">25</a>
<a href="breaking-simple-ciphers#n26" name="n26">26</a>
<a href="breaking-simple-ciphers#n27" name="n27">27</a>
<a href="breaking-simple-ciphers#n28" name="n28">28</a>
<a href="breaking-simple-ciphers#n29" name="n29">29</a>
<strong><a href="breaking-simple-ciphers#n30" name="n30">30</a></strong>
<a href="breaking-simple-ciphers#n31" name="n31">31</a>
<a href="breaking-simple-ciphers#n32" name="n32">32</a>
<a href="breaking-simple-ciphers#n33" name="n33">33</a>
</pre></td>
  <td class="code"><pre><span style="color:#F00;background-color:#FAA">$</span> irb
&gt;&gt; s=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">AOFACFSOA FSZWBEIC EIOA ZOHSFWQWOA OQQSDW</span><span style="color:#710">&quot;</span></span>
=&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">AOFACFSOA FSZWBEIC EIOA ZOHSFWQWOA OQQSDW</span><span style="color:#710">&quot;</span></span>
&gt;&gt; <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">caesar</span>(text,n)
&gt;&gt;   alphas=(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">A</span><span style="color:#710">'</span></span>..<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Z</span><span style="color:#710">'</span></span>).to_a*<span style="color:#00D">2</span>
&gt;&gt;   text.tr(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">A-Z</span><span style="color:#710">'</span></span>, alphas[n..n+<span style="color:#00D">26</span>].join)
&gt;&gt; <span style="color:#080;font-weight:bold">end</span>
&gt;&gt; <span style="color:#00D">1</span>.upto(<span style="color:#00D">25</span>) <span style="color:#080;font-weight:bold">do</span> |n| puts <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">%2d. %s</span><span style="color:#710">&quot;</span></span> % [n, caesar(s,n)] <span style="color:#080;font-weight:bold">end</span>
 <span style="color:#00D">1</span>. BPGBDGTPB <span style="color:#036;font-weight:bold">GTAXCFJD</span> <span style="color:#036;font-weight:bold">FJPB</span> <span style="color:#036;font-weight:bold">APITGXRXPB</span> <span style="color:#036;font-weight:bold">PRRTEX</span>
 <span style="color:#00D">2</span>. CQHCEHUQC <span style="color:#036;font-weight:bold">HUBYDGKE</span> <span style="color:#036;font-weight:bold">GKQC</span> <span style="color:#036;font-weight:bold">BQJUHYSYQC</span> <span style="color:#036;font-weight:bold">QSSUFY</span>
 <span style="color:#00D">3</span>. DRIDFIVRD <span style="color:#036;font-weight:bold">IVCZEHLF</span> <span style="color:#036;font-weight:bold">HLRD</span> <span style="color:#036;font-weight:bold">CRKVIZTZRD</span> <span style="color:#036;font-weight:bold">RTTVGZ</span>
 <span style="color:#00D">4</span>. ESJEGJWSE <span style="color:#036;font-weight:bold">JWDAFIMG</span> <span style="color:#036;font-weight:bold">IMSE</span> <span style="color:#036;font-weight:bold">DSLWJAUASE</span> <span style="color:#036;font-weight:bold">SUUWHA</span>
 <span style="color:#00D">5</span>. FTKFHKXTF <span style="color:#036;font-weight:bold">KXEBGJNH</span> <span style="color:#036;font-weight:bold">JNTF</span> <span style="color:#036;font-weight:bold">ETMXKBVBTF</span> <span style="color:#036;font-weight:bold">TVVXIB</span>
 <span style="color:#00D">6</span>. GULGILYUG <span style="color:#036;font-weight:bold">LYFCHKOI</span> <span style="color:#036;font-weight:bold">KOUG</span> <span style="color:#036;font-weight:bold">FUNYLCWCUG</span> <span style="color:#036;font-weight:bold">UWWYJC</span>
 <span style="color:#00D">7</span>. HVMHJMZVH <span style="color:#036;font-weight:bold">MZGDILPJ</span> <span style="color:#036;font-weight:bold">LPVH</span> <span style="color:#036;font-weight:bold">GVOZMDXDVH</span> <span style="color:#036;font-weight:bold">VXXZKD</span>
 <span style="color:#00D">8</span>. IWNIKNAWI <span style="color:#036;font-weight:bold">NAHEJMQK</span> <span style="color:#036;font-weight:bold">MQWI</span> <span style="color:#036;font-weight:bold">HWPANEYEWI</span> <span style="color:#036;font-weight:bold">WYYALE</span>
 <span style="color:#00D">9</span>. JXOJLOBXJ <span style="color:#036;font-weight:bold">OBIFKNRL</span> <span style="color:#036;font-weight:bold">NRXJ</span> <span style="color:#036;font-weight:bold">IXQBOFZFXJ</span> <span style="color:#036;font-weight:bold">XZZBMF</span>
<span style="color:#00D">10</span>. KYPKMPCYK <span style="color:#036;font-weight:bold">PCJGLOSM</span> <span style="color:#036;font-weight:bold">OSYK</span> <span style="color:#036;font-weight:bold">JYRCPGAGYK</span> <span style="color:#036;font-weight:bold">YAACNG</span>
<span style="color:#00D">11</span>. LZQLNQDZL <span style="color:#036;font-weight:bold">QDKHMPTN</span> <span style="color:#036;font-weight:bold">PTZL</span> <span style="color:#036;font-weight:bold">KZSDQHBHZL</span> <span style="color:#036;font-weight:bold">ZBBDOH</span>
<span style="color:#00D">12</span>. MARMOREAM <span style="color:#036;font-weight:bold">RELINQUO</span> <span style="color:#036;font-weight:bold">QUAM</span> <span style="color:#036;font-weight:bold">LATERICIAM</span> <span style="color:#036;font-weight:bold">ACCEPI</span>
<span style="color:#00D">13</span>. NBSNPSFBN <span style="color:#036;font-weight:bold">SFMJORVP</span> <span style="color:#036;font-weight:bold">RVBN</span> <span style="color:#036;font-weight:bold">MBUFSJDJBN</span> <span style="color:#036;font-weight:bold">BDDFQJ</span>
<span style="color:#00D">14</span>. OCTOQTGCO <span style="color:#036;font-weight:bold">TGNKPSWQ</span> <span style="color:#036;font-weight:bold">SWCO</span> <span style="color:#036;font-weight:bold">NCVGTKEKCO</span> <span style="color:#036;font-weight:bold">CEEGRK</span>
<span style="color:#00D">15</span>. PDUPRUHDP <span style="color:#036;font-weight:bold">UHOLQTXR</span> <span style="color:#036;font-weight:bold">TXDP</span> <span style="color:#036;font-weight:bold">ODWHULFLDP</span> <span style="color:#036;font-weight:bold">DFFHSL</span>
<span style="color:#00D">16</span>. QEVQSVIEQ <span style="color:#036;font-weight:bold">VIPMRUYS</span> <span style="color:#036;font-weight:bold">UYEQ</span> <span style="color:#036;font-weight:bold">PEXIVMGMEQ</span> <span style="color:#036;font-weight:bold">EGGITM</span>
<span style="color:#00D">17</span>. RFWRTWJFR <span style="color:#036;font-weight:bold">WJQNSVZT</span> <span style="color:#036;font-weight:bold">VZFR</span> <span style="color:#036;font-weight:bold">QFYJWNHNFR</span> <span style="color:#036;font-weight:bold">FHHJUN</span>
<span style="color:#00D">18</span>. SGXSUXKGS <span style="color:#036;font-weight:bold">XKROTWAU</span> <span style="color:#036;font-weight:bold">WAGS</span> <span style="color:#036;font-weight:bold">RGZKXOIOGS</span> <span style="color:#036;font-weight:bold">GIIKVO</span>
<span style="color:#00D">19</span>. THYTVYLHT <span style="color:#036;font-weight:bold">YLSPUXBV</span> <span style="color:#036;font-weight:bold">XBHT</span> <span style="color:#036;font-weight:bold">SHALYPJPHT</span> <span style="color:#036;font-weight:bold">HJJLWP</span>
<span style="color:#00D">20</span>. UIZUWZMIU <span style="color:#036;font-weight:bold">ZMTQVYCW</span> <span style="color:#036;font-weight:bold">YCIU</span> <span style="color:#036;font-weight:bold">TIBMZQKQIU</span> <span style="color:#036;font-weight:bold">IKKMXQ</span>
<span style="color:#00D">21</span>. VJAVXANJV <span style="color:#036;font-weight:bold">ANURWZDX</span> <span style="color:#036;font-weight:bold">ZDJV</span> <span style="color:#036;font-weight:bold">UJCNARLRJV</span> <span style="color:#036;font-weight:bold">JLLNYR</span>
<span style="color:#00D">22</span>. WKBWYBOKW <span style="color:#036;font-weight:bold">BOVSXAEY</span> <span style="color:#036;font-weight:bold">AEKW</span> <span style="color:#036;font-weight:bold">VKDOBSMSKW</span> <span style="color:#036;font-weight:bold">KMMOZS</span>
<span style="color:#00D">23</span>. XLCXZCPLX <span style="color:#036;font-weight:bold">CPWTYBFZ</span> <span style="color:#036;font-weight:bold">BFLX</span> <span style="color:#036;font-weight:bold">WLEPCTNTLX</span> <span style="color:#036;font-weight:bold">LNNPAT</span>
<span style="color:#00D">24</span>. YMDYADQMY <span style="color:#036;font-weight:bold">DQXUZCGA</span> <span style="color:#036;font-weight:bold">CGMY</span> <span style="color:#036;font-weight:bold">XMFQDUOUMY</span> <span style="color:#036;font-weight:bold">MOOQBU</span>
<span style="color:#00D">25</span>. ZNEZBERNZ <span style="color:#036;font-weight:bold">ERYVADHB</span> <span style="color:#036;font-weight:bold">DHNZ</span> <span style="color:#036;font-weight:bold">YNGREVPVNZ</span> <span style="color:#036;font-weight:bold">NPPRCV</span></pre></td>
</tr></table>

<p>Take a closer look at row 12.</p>

<p><strong>MARMOREAM RELINQUO QUAM LATERICIAM ACCEPI</strong></p>

<p><em>I found Rome a city of bricks and left it a city of marble.</em> - Google tells me it's Augustus.</p>

<p>The code is not the most clear I've written but if you read Ruby in your sleep you can skip this part.</p>

<p><strong>('A'..'Z')</strong> is a range in Ruby. Another, maybe more obvious, example of a range is <strong>(0..7)</strong>. </p>

<p><strong>.to_a</strong> could be read as to_array and unsurprisingly it converts a range to an array. <strong>(0..7).to_a</strong> will create  <strong>[0, 1, 2, 3, 4, 5, 6, 7]</strong></p>

<p>The operator * for arrays appends n copies of the array. Thus <strong>[0,1,2]*2</strong> will create  <strong>[0,1,2,0,1,2]</strong>.</p>

<p><a href="http://ruby-doc.org/core/classes/String.html#M000845">String#tr</a> works the same way as the Unix command tr, it translates the characters in the string according to the from and to parameters. </p>

<p>At last <strong>.join</strong> converts the array to a string.</p>

<h3>The recruiting agency</h3>

<p>A government agency responsible for signals intelligence is hiring. Among the qualifications they are looking for is the ability to break a certain cipher. I will not publish their cipher here but instead one of my own, constructed in the same way as theirs.<pre>"VGhpcyBpcyBleGNsdXNpdmUgZm9yIHlvdSwgb3I/IGMNR0d
LCkZPXgpTRV8K\nTENEQ1lCCkhfXgpoT1NFRElPCkNZCksKSE9eXk
9YCklYU1peRU1YS1pCT1gK\nXkJLRAp5SUJET0NPWAQ="</pre>
At first glance it looked like Base64 and the ending "=" made it even more likely.<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="breaking-simple-ciphers#n1" name="n1">1</a>
<a href="breaking-simple-ciphers#n2" name="n2">2</a>
<a href="breaking-simple-ciphers#n3" name="n3">3</a>
<a href="breaking-simple-ciphers#n4" name="n4">4</a>
<a href="breaking-simple-ciphers#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre><span style="color:#F00;background-color:#FAA">$</span> irb
&gt;&gt; require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">base64</span><span style="color:#710">'</span></span>
&gt;&gt; cipher = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">VGhpcyBpcyBleGNsdXNpdmUgZm9yIHlvdSwgb3I/IGMNR0dLCkZPXgpTRV8K</span><span style="color:#b0b">\n</span><span style="color:#D20">TENEQ1lCCkhfXgpoT1NFRElPCkNZCksKSE9eXk9YCklYU1peRU1YS1pCT1gK</span><span style="color:#b0b">\n</span><span style="color:#D20">XkJLRAp5SUJET0NPWAQ=</span><span style="color:#710">&quot;</span></span>
&gt;&gt; decoded=<span style="color:#036;font-weight:bold">Base64</span>.decode64(cipher)
=&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">This is exclusive for you, or? c</span><span style="color:#b0b">\r</span><span style="color:#D20">GGK</span><span style="color:#b0b">\n</span><span style="color:#D20">FO^</span><span style="color:#b0b">\n</span><span style="color:#D20">SE<em></span><span style="color:#b0b">\n</span><span style="color:#D20">LCDCYB</span><span style="color:#b0b">\n</span><span style="color:#D20">H</em>^</span><span style="color:#b0b">\n</span><span style="color:#D20">hOSEDIO</span><span style="color:#b0b">\n</span><span style="color:#D20">CY</span><span style="color:#b0b">\n</span><span style="color:#D20">K</span><span style="color:#b0b">\n</span><span style="color:#D20">HO^^OX</span><span style="color:#b0b">\n</span><span style="color:#D20">IXSZ^EMXKZBOX</span><span style="color:#b0b">\n</span><span style="color:#D20">^BKD</span><span style="color:#b0b">\n</span><span style="color:#D20">yIBDOCOX</span><span style="color:#b0b">\004</span><span style="color:#710">&quot;</span></span></pre></td>
</tr></table></p>

<p>So it's Base64 but to no surprise it didn't end there. The "This is exclusive for you, or?" hinted at XOR so I tried XORing the text with 0-255.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="breaking-simple-ciphers#n1" name="n1">1</a>
<a href="breaking-simple-ciphers#n2" name="n2">2</a>
<a href="breaking-simple-ciphers#n3" name="n3">3</a>
<a href="breaking-simple-ciphers#n4" name="n4">4</a>
<a href="breaking-simple-ciphers#n5" name="n5">5</a>
<a href="breaking-simple-ciphers#n6" name="n6">6</a>
<a href="breaking-simple-ciphers#n7" name="n7">7</a>
<a href="breaking-simple-ciphers#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre>&gt;&gt; code=decoded[<span style="color:#00D">31</span>..decoded.length].split(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#404">/</span></span>)
&gt;&gt; <span style="color:#036;font-weight:bold">File</span>.open(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">xor.txt</span><span style="color:#710">'</span></span>,<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">w</span><span style="color:#710">'</span></span>) { |file|
<span style="color:#00D">?&gt;</span>   <span style="color:#00D">0</span>.upto(<span style="color:#00D">255</span>) {|n|
<span style="color:#00D">?&gt;</span>     file.write(n.to_s + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> </span><span style="color:#710">&quot;</span></span>)
&gt;&gt;     code.each {|c| file.write( (c[<span style="color:#00D">0</span>]^n).chr ) }
&gt;&gt;     file.write(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\n</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>)
&gt;&gt;   }
&gt;&gt; }</pre></td>
</tr></table>

<p>A quick look in the file told me that XORing with 42 was the solution.</p>

<p>Now you know how to break two of the most simple cipher methods. Use the knowledge wisely. :)</p>
</div>
<p class="meta">
  Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a>, <a href="http://alicebobandmallory.com/articles/category/cryptography" rel="noindex, follow, tag">Cryptography</a>&nbsp;<strong>|</strong>&nbsp;<a href="breaking-simple-ciphers#comments">7 comments</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <p class="postmetadata alt">
      <small><a href="breaking-simple-ciphers#respond">Comments closed</a></small>
    </p>
  <ol class="comment-list" id="commentList">
  
    <ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>
<ol id="comments" class="comments">
  	<li class="comment" id="comment-3632">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=16dd3f730e4b105c3b3c34de435b8f09&amp;size=60" /></div>
	    <cite>Romy</cite>
		<abbr title="2009-09-24T00:51:12+02:00"><span class="typo_date" title="Wed, 23 Sep 2009 22:51:12 GMT">Wed, 23 Sep 2009 22:51:12 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>This post was teh bomb.</p>

<p>I &lt;3 ruby.
I &lt;3 ciphers.
I &lt;3 kanye stepping on kittens.</p>

<p>Keep it coming&#8230;</p>
	  </div>
	</li>
		<li class="comment" id="comment-3818">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2009-11-07T00:02:21+01:00"><span class="typo_date" title="Fri, 06 Nov 2009 23:02:21 GMT">Fri, 06 Nov 2009 23:02:21 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Thanks!</p>
	  </div>
	</li>
		<li class="comment" id="comment-5317">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=0c75619208d2bed137638967589055ac&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-07T03:05:38+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 01:05:38 GMT">Thu, 07 Apr 2011 01:05:38 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Hello,</p>

<p>I am working on a statistical analysis of a simple Vigen√®re cipher for school, let&#8217;s say the Caesar cipher because it&#8217;s a subclass of Vigen√®re ciphers.</p>

<p>My task is to prove that letter frequencies in a message are equal to letter frequencies in a criptogram (just on different letters).
histogram(message) == histogram(caesar(message));</p>

<p>Within a 27 character alphabet ([A-Z\s]) all of this is easy enough. But i wanted to take this assignment up a notch and not limit the input alphabet.</p>

<p>So i used base64 encode to bring any input string to a common alphabet of 64 characters.</p>

<p>I can then apply the cipher on the encoded string using a 64 character alphabet ([A-Za-z\+\/]).</p>

<p>Base64 reads 6bits from the input and writes one character. When doing this to 8bit letters the results become 2 bit shifted on every letter.</p>

<p>Now i&#8217;m racking my brain to figure out how to analyse the text statistically because.
histogram(base64<em>decode(caesar(base64</em>encode(message)))) !== histogram(message);</p>

<p>Do you have any ideeas?</p>
	  </div>
	</li>
		<li class="comment" id="comment-5339">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-08T00:21:49+02:00"><span class="typo_date" title="Thu, 07 Apr 2011 22:21:49 GMT">Thu, 07 Apr 2011 22:21:49 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I think you already answered the question. The problem is that you are encrypting the message in 6 bits chunks but the actual data is 8 bits per character (or is it?).
I&#8217;m sure there&#8217;s a way to analyze this but at a glance it seems a lot harder than to compare histograms for a plaintext and a Caesar ciphertext.</p>

<p>I don&#8217;t know if it&#8217;s of use to you but 
histogram(caesar(base64encode(message))) is the same as for histogram(base64encode(message))</p>

<p>Code example here: <a href="https://gist.github.com/908911">https://gist.github.com/908911</a></p>
	  </div>
	</li>
		<li class="comment" id="comment-5340">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Mihai</cite>
		<abbr title="2011-04-08T03:01:04+02:00"><span class="typo_date" title="Fri, 08 Apr 2011 01:01:04 GMT">Fri, 08 Apr 2011 01:01:04 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>If our priority is not to compare apples to oranges we have to do what you propose.</p>

<p>But in order for an external entity (code breaker) to do it he needs a corpus of data similar to the one being transmitted with which to compare histograms: base64encode(criptogram) compared to base64encode(corpus).</p>

<p>If we assume we need to compare the criptogram statistics to a given corpus and not the initial message (to which the code breaker could not have access to) some other method must be devised.</p>

<p>The main issue is that the &#8220;simple mono-alphabetic cipher&#8221; we apply on the base64encoded level generates a &#8220;poli-alphabetic cipher&#8221;.</p>

<p>Any 8 bit entity is partially replaced during the enciphering stage, i.e. only 4-6 bits of it&#8217;s data is replaced. These replacements may generate 8 bit entities that were not present in the original message.</p>

<p>Hence the histogram gets stretched over some new symbols as well as redistributed over the old symbols.</p>

<p>My findings were that the histogram maximum of 18% frequency of spaces in the message dropped to a maximum of 3% frequency of some other symbol in the criptogram. The histogram is heavily redistributed.</p>
	  </div>
	</li>
		<li class="comment" id="comment-5365">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=d41d8cd98f00b204e9800998ecf8427e&amp;size=60" /></div>
	    <cite>Jonas Elfstr√∂m</cite>
		<abbr title="2011-04-10T23:25:40+02:00"><span class="typo_date" title="Sun, 10 Apr 2011 21:25:40 GMT">Sun, 10 Apr 2011 21:25:40 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>How about grouping the characters in three and do a frequency analysis on that instead? The reasoning is that 6+6+6+6=24 and 24/8=3. Most probably only useful if it&#8217;s Caesar and not a longer key. It also seems likely that you would need quite a long chiphertext before this kind of frequency analysis would give anything useful.</p>

<p>I tested the hypothesis at <a href="https://gist.github.com/912723">https://gist.github.com/912723</a>
and the histograms for the cipher and the plaintext are the same.</p>

<p>For &#8220;A Scandal in Bohemia&#8221; by Sir Arthur Conan Doyle (19119 characters) the number of occurrences for the top five are:<br />
&#8221; th&#8221; => 80<br />
&#8220;he &#8221; => 63<br />
&#8220;the&#8221; => 54<br />
&#8220;and&#8221; => 46<br />
&#8221; of&#8221; => 38  </p>
	  </div>
	</li>
		<li class="comment" id="comment-5397">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=9e36aeb20f1b4a763043d3ce4942b454&amp;size=60" /></div>
	    <cite><a href="../../../../index.html">Jonas Elfstr√∂m</a></cite>
		<abbr title="2011-04-12T00:06:18+02:00"><span class="typo_date" title="Mon, 11 Apr 2011 22:06:18 GMT">Mon, 11 Apr 2011 22:06:18 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>I just ran the same frequency analysis on the longer &#8220;The Red-headed League&#8221; (76713 characters) and guess what came out on top?  </p>

<p>&#8221; th&#8221; => 363<br />
&#8220;he &#8221; => 307<br />
&#8220;the&#8221; => 296<br />
&#8220;and&#8221; => 163  </p>

<p>That&#8217;s exactly the same order as for &#8220;A Scandal in Bohemia&#8221; but then something strange happened </p>

<p>&#8220;nd &#8221; => 159<br />
&#8221; an&#8221; => 151<br />
&#8220;to &#8221; => 140<br />
&#8220;ed &#8221; => 139<br />
&#8221; to&#8221; => 139<br />
&#8220;ing&#8221; => 134  </p>

<p>and not until then we find  </p>

<p>&#8221; of&#8221; => 120</p>

<p>Until more texts has been analyzed like this I can&#8217;t say if it&#8217;s a problem or an anomaly.</p>
	  </div>
	</li>
	</ol>

  
  </ol>


<p class="postmetadata alt">
  <small>
  <a href="../../../../xml/rss20/article/3604/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>


<p>Comments are closed</p>
<!--
  <p>Comments are disabled</p>
-->

      <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
    </div>

    <div id="sidebar">
      <!-- search -->
      <div id="search" class="search">
<!--	<form action="/articles/search" id="sform" method="get">
	  <p><input type="text" id="q" name="q" value="" /></p>
	</form>
	
	<div id="loading" class="loading" style="display:none;">Searching...</div>
	<div id="results" class="results"></div>
  <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('loading')}, onLoading:function(request){Element.show('loading')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script>
-->
</div>


      <!-- sidebar components -->
      
      
<div class="sidebar-node">
  <h3></h3>
<a href="http://stackoverflow.com/users/44620/jonas-elfstrom">
<img src="http://stackoverflow.com/users/flair/44620.png" width="208" height="58" alt="Stack Overflow profile for Jonas Elfstr√∂m" title="Stack Overflow profile for Jonas Elfstr√∂m">
</a>
<ul>
<li><nobr><a href="../../../../pages/AboutMe">About me</a>/<a href="../../../../pages/OmMig">Om mig</a></nobr></li>
</ul>
<a href="https://gist.github.com/jonelf">Public Gists</a><br><a href="http://jonelf.posterous.com/">Posterous</a><br><br>
<b>Recommended reading</b><br/><a href="http://www.amazon.com/gp/product/0385495323?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385495323">The Code Book</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385495323" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/>
<a href="http://www.amazon.com/gp/product/0385493622?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385493622">Fermat's Enigma</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385493622" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0399156828?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0399156828">Zero History</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0399156828" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0470474246?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0470474246">Cryptography Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0470474246" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/><br/>

</div>


  


    </div>
    <br style="clear:both;" />
  </div>

  <div id="footer">
    <hr />
    <p><a href="../../../../index.html">Alice, Bob, and Mallory</a></p>
    <ul>
      <li>powered by <a href="http://typosphere.org">typo</a> /
          styled with <a href="http://quotedprintable.com/pages/scribbish">scribbish</a></li>
    </ul>
  </div>
</div>
</body>
</html>
