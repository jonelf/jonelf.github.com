<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>The Thrush combinator in C#</title>
  <meta name="viewport" content="width=device-width; initial-scale=1.0;">
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../../../xml/rsd" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="../../../../xml/atom/article/3703/feed.xml" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="../../../../xml/rss20/article/3703/feed.xml" />
  <script src="../../../../javascripts/cookies.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/prototype.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/effects.js?1170454372" type="text/javascript"></script>
  <script src="../../../../javascripts/typo.js?1170454372" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="../../../../stylesheets/theme/application.css?1357773761" media="all" rel="Stylesheet" type="text/css" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-4453587-1");
pageTracker._trackPageview();
} catch(err) {}
</script>
</head>

<body>
<div id="container">
  <div id="header">
    <h1><span><a href="../../../../index.html">Alice, Bob, and Mallory</a></span></h1>
    <h2>metasyntactics</h2>
  </div>

  <div id="page">
    <div id="content">
      <!--
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
       xmlns:dc="http://purl.org/dc/elements/1.1/">
<rdf:Description
    rdf:about=""
    dc:title="The Thrush combinator in C#"
    dc:identifier="http://alicebobandmallory.com/articles/2009/10/06/the-thrush-combinator-in-c"
    dc:description="Last year I read Reg &quot;Raganwald'&quot; Braithwaite's excellent post The Thrush"
    dc:creator="jonelf"
    dc:date="2011-03-09T13:13:30+01:00" />
</rdf:RDF>
-->

<div class="post" onmouseover="if (getCookie('is_admin') == 'yes') { Element.show('admin_article'); }"  onmouseout="Element.hide('admin_article');" >
  <a href="http://alicebobandmallory.com/admin/content/edit/3703" class="admintools" id="admin_article" style="display: none">edit</a>
  <h2>The Thrush combinator in C#</h2>
  <p class="auth">Posted by Jonas Elfstr√∂m
  <span class="typo_date" title="Tue, 06 Oct 2009 18:35:00 GMT">Tue, 06 Oct 2009 18:35:00 GMT</span></p>
  <p>Last year I read <a href="http://github.com/raganwald/homoiconic/blob/master/README.markdown">Reg "Raganwald'" Braithwaite's</a> excellent post <a href="http://github.com/raganwald/homoiconic/blob/master/2008-10-30/thrush.markdown#readme">The Thrush</a> and he  explains it as </p>

<blockquote>
    <p>The thrush is written Txy = yx. It reverses evaluation.</p>
</blockquote>

<p>Back then I didn't even consider trying to implement it in C#. That was before I digged deeper into <a href="http://msdn.microsoft.com/en-us/library/bb397687.aspx">lambda expressions</a> and <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">extension methods</a> in C# 3.0 and way before last night when I read Debasish Ghosh's post on how to <a href="http://debasishg.blogspot.com/2009/09/thrush-combinator-in-scala.html">implement the Thrush in Scala</a>. After reading that my first thought was if it was possible to do the same in C#. Here's my attempt.</p>

<p>At first I struggled with the static typing and headed for an easy way out using Object in the extension method of Object:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
<a href="the-thrush-combinator-in-c#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>public <span style="color:#088;font-weight:bold">static</span> object Into(this Object obj, 
                        Func&lt;object, object&gt; f)
{  <span style="color:#080;font-weight:bold">return</span> f.Invoke(obj); }</pre></td>
</tr></table>

<p><br>
My goal was to translate the Ruby example</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>(<span style="color:#00D">1</span>..<span style="color:#00D">100</span>).select(&amp;<span style="color:#A60">:odd?</span>).inject(&amp;<span style="color:#A60">:+</span>).into { |x| x * x }</pre></td>
</tr></table>

<p><br>
in Raganwald's post to C#.</p>

<blockquote>
    <p>Which reads "Take the numbers from 1 to 100, keep the odd ones, take the sum of those, and then answer the square of that number."</p>
</blockquote>

<p>But with the Object based extension method I had to do some ugly casts.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>var r = Enumerable.Range(<span style="color:#00D">1</span>, <span style="color:#00D">100</span>).Where(x =&gt; Odd(x)).Sum().Into(x =&gt; (<span style="color:#0a5;font-weight:bold">int</span>)x * (<span style="color:#0a5;font-weight:bold">int</span>)x);</pre></td>
</tr></table>

<p><br>
With som added typing I could do: </p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>var result = Enumerable.Range(<span style="color:#00D">1</span>, <span style="color:#00D">100</span>).Where(x =&gt; Odd(x)).Sum().Into(x =&gt; x * x);</pre></td>
</tr></table>

<p><br>
That merely moved the cast to the extension method and also made it work for integers only.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>public <span style="color:#088;font-weight:bold">static</span> <span style="color:#0a5;font-weight:bold">int</span> Into(this Object obj, Func&lt;<span style="color:#0a5;font-weight:bold">int</span>, <span style="color:#0a5;font-weight:bold">int</span>&gt; f)
{ <span style="color:#080;font-weight:bold">return</span> f.Invoke((<span style="color:#0a5;font-weight:bold">int</span>)obj); }</pre></td>
</tr></table>

<p><br>
Then I remembered generics and method type inference which finally led to a decent Thrush combinator in C#.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>public <span style="color:#088;font-weight:bold">static</span> T Into&lt;T&gt;(this T obj, Func&lt;T, T&gt; f)
{ <span style="color:#080;font-weight:bold">return</span> f(obj); }</pre></td>
</tr></table>

<p><br>
The casts are gone and it's also, as far as I can see, as flexible as the one in Ruby.<br><br>
Contrived example follows:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>var test = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">ball</span><span style="color:#710">&quot;</span></span>;
var ball = test.Into(s =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Are we having a </span><span style="color:#710">&quot;</span></span> + s + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> yet?</span><span style="color:#710">&quot;</span></span>);</pre></td>
</tr></table>

<p><br>
<strong>The odd part</strong></p>

<p>The <em>Odd(x)</em> method call in the calculation above is a plain static method.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>private <span style="color:#088;font-weight:bold">static</span> <span style="color:#0a5;font-weight:bold">bool</span> Odd(<span style="color:#0a5;font-weight:bold">int</span> n)
{ <span style="color:#080;font-weight:bold">return</span> (n % <span style="color:#00D">2</span> != <span style="color:#00D">0</span>); }</pre></td>
</tr></table>

<p><br>
If you want an even more terse syntax you could try an ext. method on IEnumerable like this:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>public <span style="color:#088;font-weight:bold">static</span> IEnumerable&lt;<span style="color:#0a5;font-weight:bold">int</span>&gt; Odd(this IEnumerable&lt;<span style="color:#0a5;font-weight:bold">int</span>&gt; en)
{ <span style="color:#080;font-weight:bold">return</span> en.Where(n =&gt; n % <span style="color:#00D">2</span> != <span style="color:#00D">0</span>); }</pre></td>
</tr></table>

<p><br>
Gives:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>var result = Enumerable.Range(<span style="color:#00D">1</span>, <span style="color:#00D">100</span>).Odd().Sum().Into(x =&gt; x * x);</pre></td>
</tr></table>

<p><br>
<!--Also as a general alternative to <code>.Sum()</code> I could have used <code>.Aggregate((x, y) =&gt; x + y))</code> but I found it a bit verbose.-->
In C# I don't think it's possible to pull off the Symbol#to_proc stuff that Ruby does. That's the <em>&amp;:</em> in the <em>select(&amp;:odd?)</em> and the <em>inject(&amp;:+)</em> in the Ruby example. Raganwald has a great <a href="http://weblog.raganwald.com/2007/11/fun-with-symboltoproc.html">post</a> on that too.</p>

<p><font style="color:red;font-weight:bold">Edit</font></p>

<p>Check out <a href="http://stackoverflow.com/questions/1528319/operators-as-method-parameters-in-c-and-the-thrush-combinator">Jon Skeet's nice answer</a> on StackOverflow to my question on how to make this even more Ruby-like. I have to try out that Operator class later though.</p>

<p><font style="color:red;font-weight:bold">Edit 2009-10-07</font></p>

<p>One thing I found a bit surprising is that by implementing the Into ext. method in this way it not only works for all objects based on <code>System.Object</code> but it also works  for <a href="http://msdn.microsoft.com/en-us/library/s1ax56ch.aspx">value types</a>.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="the-thrush-combinator-in-c#n1" name="n1">1</a>
<a href="the-thrush-combinator-in-c#n2" name="n2">2</a>
<a href="the-thrush-combinator-in-c#n3" name="n3">3</a>
<a href="the-thrush-combinator-in-c#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a5;font-weight:bold">int</span> n=<span style="color:#00D">4711</span>;
<span style="color:#0a5;font-weight:bold">int</span> oddOrZero = n.Into(x =&gt; x % <span style="color:#00D">2</span> !=<span style="color:#00D">0</span> ? x : <span style="color:#00D">0</span>); <span style="color:#777">// 4711</span>
n = <span style="color:#00D">4712</span>;
oddOrZero = n.Into(x =&gt; x % <span style="color:#00D">2</span> != <span style="color:#00D">0</span> ? x : <span style="color:#00D">0</span>); <span style="color:#777">// 0</span></pre></td>
</tr></table>

<p><br>
<font style="color:red;font-weight:bold">Edit 2009-10-12</font></p>

<p>My confusion did stem from my lack of understanding of <a href="http://msdn.microsoft.com/en-us/library/bb383977(loband).aspx">extension methods</a>. Ex. methods are in fact not extending <code>System.Object</code> or any other type, they are "<a href="http://blogs.msdn.com/ericlippert/about.aspx">nothing more than a pleasant syntax for calling a static method</a>" in  case no instance method with the same name can be found.</p>
</div>
<p class="meta">
  Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a>, <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a>&nbsp;<strong>|</strong>&nbsp;<a href="the-thrush-combinator-in-c#comments">1 comment</a>
</p>

  <a name="comments"></a><h4 class="blueblk">Comments</h4>
    <p class="postmetadata alt">
      <small><a href="the-thrush-combinator-in-c#respond">Comments closed</a></small>
    </p>
  <ol class="comment-list" id="commentList">
  
    <ol id="comments" class="comments">
  	<li class="comment" id="comment-3707">
	  <div class="author">
	    <div><img alt="Avatar" class="gravatar" src="http://www.gravatar.com/avatar.php?gravatar_id=7a7b0d263265c356f12d0d40a84a585f&amp;size=60" /></div>
	    <cite><a href="http://hTTYttp://homoiconic.com">Reginald Braithwaite</a></cite>
		<abbr title="2009-10-07T00:52:31+02:00"><span class="typo_date" title="Tue, 06 Oct 2009 22:52:31 GMT">Tue, 06 Oct 2009 22:52:31 GMT</span></abbr>
	  </div>
	  <div class="content">
	    <p>Great post!</p>
	  </div>
	</li>
	</ol>

  
  </ol>


<p class="postmetadata alt">
  <small>
  <a href="../../../../xml/rss20/article/3703/feed.xml" title="RSS Feed">RSS feed for this post</a>
  </small>
</p>


<p>Comments are closed</p>
<!--
  <p>Comments are disabled</p>
-->

      <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
    </div>

    <div id="sidebar">
      <!-- search -->
      <div id="search" class="search">
<!--	<form action="/articles/search" id="sform" method="get">
	  <p><input type="text" id="q" name="q" value="" /></p>
	</form>
	
	<div id="loading" class="loading" style="display:none;">Searching...</div>
	<div id="results" class="results"></div>
  <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('loading')}, onLoading:function(request){Element.show('loading')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script>
-->
</div>


      <!-- sidebar components -->
      
      
<div class="sidebar-node">
  <h3></h3>
<a href="http://stackoverflow.com/users/44620/jonas-elfstrom">
<img src="http://stackoverflow.com/users/flair/44620.png" width="208" height="58" alt="Stack Overflow profile for Jonas Elfstr√∂m" title="Stack Overflow profile for Jonas Elfstr√∂m">
</a>
<ul>
<li><nobr><a href="../../../../pages/AboutMe">About me</a>/<a href="../../../../pages/OmMig">Om mig</a></nobr></li>
</ul>
<a href="https://gist.github.com/jonelf">Public Gists</a><br><a href="http://jonelf.posterous.com/">Posterous</a><br><br>
<b>Recommended reading</b><br/><a href="http://www.amazon.com/gp/product/0385495323?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385495323">The Code Book</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385495323" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/>
<a href="http://www.amazon.com/gp/product/0385493622?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385493622">Fermat's Enigma</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385493622" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0399156828?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0399156828">Zero History</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0399156828" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0470474246?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0470474246">Cryptography Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0470474246" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/><br/>

</div>


  


    </div>
    <br style="clear:both;" />
  </div>

  <div id="footer">
    <hr />
    <p><a href="../../../../index.html">Alice, Bob, and Mallory</a></p>
    <ul>
      <li>powered by <a href="http://typosphere.org">typo</a> /
          styled with <a href="http://quotedprintable.com/pages/scribbish">scribbish</a></li>
    </ul>
  </div>
</div>
</body>
</html>
