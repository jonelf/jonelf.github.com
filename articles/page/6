<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Alice, Bob, and Mallory</title>
  <meta name="viewport" content="width=device-width; initial-scale=1.0;">
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../xml/rsd" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="../../xml/atom/feed.xml" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="../../xml/rss20/feed.xml" />
  <script src="../../javascripts/cookies.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/prototype.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/effects.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/typo.js?1170454372" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="../../stylesheets/theme/application.css?1357773761" media="all" rel="Stylesheet" type="text/css" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-4453587-1");
pageTracker._trackPageview();
} catch(err) {}
</script>
</head>

<body>
<div id="container">
  <div id="header">
    <h1><span><a href="../../index.html">Alice, Bob, and Mallory</a></span></h1>
    <h2>metasyntactics</h2>
  </div>

  <div id="page">
    <div id="content">
      <div class="atomentry" id="article-3439">
  <h2 class="title">
    <a href="../2009/07/31/setting-charset-with-a-before-filter-in-sinatra">Setting charset with a before filter in Sinatra</a> 
    <span class="comment_count">2</span>
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-07-31T08:30:00+02:00"><span class="typo_date" title="Fri, 31 Jul 2009 06:30:00 GMT">Fri, 31 Jul 2009 06:30:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>In the git example in my <a href="../2009/06/11/an-average-application-in-the-clouds">previous post</a> about Sinatra and Heroku I happened to mention a filter for using UTF-8. I remember finding it somewhere on the net but I can't remember where and it seems my current google-fu is as weak as my memory. Anyway, it looks like this:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
<a href="6#n5" name="n5">5</a>
<a href="6#n6" name="n6">6</a>
<a href="6#n7" name="n7">7</a>
<a href="6#n8" name="n8">8</a>
<a href="6#n9" name="n9">9</a>
<strong><a href="6#n10" name="n10">10</a></strong>
<a href="6#n11" name="n11">11</a>
</pre></td>
  <td class="code"><pre><span style="color:#036;font-weight:bold">CONTENT_TYPES</span> = {<span style="color:#A60">:html</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">text/html</span><span style="color:#710">'</span></span>, <span style="color:#A60">:css</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">text/css</span><span style="color:#710">'</span></span>, 
                <span style="color:#A60">:js</span>  =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">application/javascript</span><span style="color:#710">'</span></span>}

before <span style="color:#080;font-weight:bold">do</span>
 request_uri = <span style="color:#080;font-weight:bold">case</span> request.env[<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">REQUEST_URI</span><span style="color:#710">'</span></span>]
   <span style="color:#080;font-weight:bold">when</span> <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\.</span><span style="color:#808">css$</span><span style="color:#404">/</span></span> : <span style="color:#A60">:css</span>
   <span style="color:#080;font-weight:bold">when</span> <span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#D20">\.</span><span style="color:#808">js$</span><span style="color:#404">/</span></span>  : <span style="color:#A60">:js</span>
   <span style="color:#080;font-weight:bold">else</span>          <span style="color:#A60">:html</span>
 <span style="color:#080;font-weight:bold">end</span>
 content_type <span style="color:#036;font-weight:bold">CONTENT_TYPES</span>[request_uri], <span style="color:#A60">:charset</span> =&gt; <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">utf-8</span><span style="color:#710">'</span></span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a></li>
    
    <li>Meta 
      
      <a href="../2009/07/31/setting-charset-with-a-before-filter-in-sinatra#comments">2 comments</a>,
      <a href="../2009/07/31/setting-charset-with-a-before-filter-in-sinatra" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3439/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3439/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3375">
  <h2 class="title">
    <a href="../2009/06/11/an-average-application-in-the-clouds">An average application in the clouds</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-06-11T23:03:00+02:00"><span class="typo_date" title="Thu, 11 Jun 2009 21:03:00 GMT">Thu, 11 Jun 2009 21:03:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>A couple of days ago I published my first applicaiton "in the cloud". I named it <a href="http://average.heroku.com/">Average</a> and it's only a tiny little app that I did for fun and learning. It's written in <a href="http://www.ruby-lang.org/en/">Ruby</a> with the micro framework <a href="http://www.sinatrarb.com/">Sinatra</a>, <a href="http://datamapper.org/doku.php?id=docs">DataMapper</a>, <a href="http://haml.hamptoncatlin.com/">Haml</a> and published to <a href="http://heroku.com/">Heroku</a> with their <a href="http://en.wikipedia.org/wiki/Git_(software)">git</a>-based workflow. Except Ruby I hadn't used any of these before.<br/></p>

<p><strong>The tools</strong><br/>
<a href="http://www.sinatrarb.com/">Sinatra</a> will most likely become my favorite tool for quick web hacks in the futute. I've been using Rubys' built-in CGI support for such before, but Sinatra is beyond compare. It may not be very well suited for anything but small projects but it's hand in glove for admin pages, "reports" or REST services.  Still there are some not that small projects on <a href="http://www.sinatrarb.com/wild.html">http://www.sinatrarb.com/wild.html</a><br/><br/>
<a href="http://datamapper.org/">DataMapper</a> is an <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> and at glance it looks a lot like <a href="http://en.wikipedia.org/wiki/ActiveRecord_(Rails)">ActiveRecord</a> but it feels more <a href="http://www.actsasflinn.com/2009/01/02/5-reasons-datamapper-will-deprecate-activerecord">"pure"</a>. I really like that it uses regular Ruby classes (and methods, no method_missing magic) that you<a href="http://datamapper.org/doku.php?id=docs:properties"> include DataMapper</a> to. Sadly the documentation is terrible, it's unstructured and missing some crucial bits. Hopefully that will change in the near future and since it's a wiki anyone can help.<br/><br/></p>

<p><a href="http://haml.hamptoncatlin.com/tutorial/">Haml</a> is a markup language that generates HTML/XHTML. It makes it very easy to create fully validating XHTML pages. Some parts of Hamls felt kind of strange but after using it for a couple of hours it all seemed to fall into place and I started to like it more and more by the minute. As a disclaimer I have to admit to only have created 8-9 simple <a href="http://haml.hamptoncatlin.com/docs/rdoc/files/FAQ.html">Haml</a> templates ever.<br/><br/></p>

<p><a href="http://git-scm.com/">git</a> is a distributed revision control tool. It's really fast, faster than any <a href="http://en.wikipedia.org/wiki/Software_configuration_management">SCM</a> I've ever used. Git was initially developed by Linus Torvalds and <a href="http://github.com/">http://github.com/</a> seems to be a driving force of adoption.<br/>
<br/></p>

<p><a href="http://heroku.com/">Heroku</a> is very impressive! Unparalleled ease of deployment and if you need more power just <a href="http://heroku.com/pricing#blossom-1">slide the &quot;dyno slider&quot;</a>! Heroku is free as long as you only use one <a href="http://heroku.com/how/dynos">dyno</a>, but if you need more "CPUs", backups, more than 5MB and so on, there's a fee.<br/><br/></p>

<p><b>Under the hood</b>
<br/>
<a href="http://average.heroku.com/">Average</a>&nbsp;doesn't do much but to its defense it does it in few lines of code. One single Ruby file and some views:<br/>
<font face=Consolas size=1>$ wc -l average.rb<br/>&nbsp;&nbsp;196 average.rb<br/>$ wc -l views/*.haml<br/>&nbsp;&nbsp;6 views/average.haml<br/>&nbsp;19 views/index.haml<br/>&nbsp;25 views/new.haml<br/>&nbsp;&nbsp;9 views/not<em>enough</em>data.haml<br/>&nbsp;13 views/poll.haml<br/>&nbsp;16 views/show.haml<br/></font>
284 rows total.
<br/>And there's nothing more to it because the data model is included in the average.rb:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
<a href="6#n5" name="n5">5</a>
<a href="6#n6" name="n6">6</a>
<a href="6#n7" name="n7">7</a>
<a href="6#n8" name="n8">8</a>
<a href="6#n9" name="n9">9</a>
<strong><a href="6#n10" name="n10">10</a></strong>
<a href="6#n11" name="n11">11</a>
<a href="6#n12" name="n12">12</a>
<a href="6#n13" name="n13">13</a>
<a href="6#n14" name="n14">14</a>
<a href="6#n15" name="n15">15</a>
<a href="6#n16" name="n16">16</a>
<a href="6#n17" name="n17">17</a>
<a href="6#n18" name="n18">18</a>
<a href="6#n19" name="n19">19</a>
<strong><a href="6#n20" name="n20">20</a></strong>
<a href="6#n21" name="n21">21</a>
</pre></td>
  <td class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Average</span>
  include <span style="color:#036;font-weight:bold">DataMapper</span>::<span style="color:#036;font-weight:bold">Resource</span>
  property <span style="color:#A60">:id</span>, <span style="color:#036;font-weight:bold">Integer</span>, <span style="color:#A60">:serial</span> =&gt; <span style="color:#069">true</span>
  property <span style="color:#A60">:name</span>, <span style="color:#036;font-weight:bold">String</span>, <span style="color:#A60">:length</span> =&gt; <span style="color:#00D">50</span>
  property <span style="color:#A60">:unit</span>, <span style="color:#036;font-weight:bold">String</span>, <span style="color:#A60">:length</span> =&gt; <span style="color:#00D">50</span>
  property <span style="color:#A60">:what</span>, <span style="color:#036;font-weight:bold">String</span>, <span style="color:#A60">:length</span> =&gt; <span style="color:#00D">50</span>
  property <span style="color:#A60">:public</span>, <span style="color:#036;font-weight:bold">Boolean</span>, <span style="color:#A60">:default</span> =&gt; <span style="color:#069">true</span>
  property <span style="color:#A60">:avgthreshold</span>, <span style="color:#036;font-weight:bold">Integer</span>, <span style="color:#A60">:default</span> =&gt; <span style="color:#00D">0</span>
  property <span style="color:#A60">:cryptokey</span>, <span style="color:#036;font-weight:bold">String</span>
  property <span style="color:#A60">:adminkey</span>, <span style="color:#036;font-weight:bold">String</span>
  property <span style="color:#A60">:allow_multiple</span>, <span style="color:#036;font-weight:bold">Boolean</span>, <span style="color:#A60">:default</span> =&gt; <span style="color:#069">false</span>
  has n, <span style="color:#A60">:values</span>
<span style="color:#080;font-weight:bold">end</span>

<span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Value</span>
  include <span style="color:#036;font-weight:bold">DataMapper</span>::<span style="color:#036;font-weight:bold">Resource</span>
  property <span style="color:#A60">:id</span>, <span style="color:#036;font-weight:bold">Serial</span>
  property <span style="color:#A60">:value</span>, <span style="color:#036;font-weight:bold">Float</span>
  property <span style="color:#A60">:valuekey</span>, <span style="color:#036;font-weight:bold">String</span>
  belongs_to <span style="color:#A60">:average</span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>

<p><br/>
I only had to type one single SQL statement: <br/>
<font face=Consolas size=2>CREATE DATABASE average;</font><br/>
The tables were created by executing <font face=Consolas size=2>DataMapper.auto_migrate!</font> (in irb), it's also possible to migrate table by table: <font face=Consolas size=2>Average.auto_migrate!</font>. Migrate drops the table so if you want to keep the data you can use <font face=Consolas size=2>Averages.auto_upgrade!</font>. It's real easy and powerful.<br/>
Heroku also has a console and there you can run Ruby code in the running production enviroment.<br/>
<font face=Consolas size=2>
$ heroku console<br/>
&gt;&gt; DataMapper.auto_migrate!<br/>
</font><br/>
To push your local database to the server just:<br/><font face=Consolas size=2>
$ heroku db:push mysql://user:pwd@localhost/average<br/></font>
(Heroku runs PostgreSQL but the above translates from a plethora of  databases. I got some kind of problem with Booleans from MySQL though.)<br/>For ActiveRecord there's rake db:...
<br/><br/>
A typical Sinatra Route (a HTTP method paired with a URL matching pattern) could look something like this:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>get <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">/</span><span style="color:#710">'</span></span> <span style="color:#080;font-weight:bold">do</span>
  <span style="color:#33B">@avgs</span>=<span style="color:#036;font-weight:bold">Average</span>.all(<span style="color:#A60">:public</span> =&gt; <span style="color:#069">true</span>, <span style="color:#A60">:limit</span> =&gt; <span style="color:#00D">25</span>, <span style="color:#A60">:order</span> =&gt; [<span style="color:#A60">:id</span>.desc])
  haml <span style="color:#A60">:index</span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>

<p><br/>
My views are written in Haml and it looks something like this:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>%h1= <span style="color:#33B">@avg</span>.name
%p== <span style="color:#036;font-weight:bold">The</span> average <span style="color:#777">#{@avg.what} is #{average} #{@avg.unit} and the sample size is #{sample_size}.</span>
- <span style="color:#080;font-weight:bold">if</span> <span style="color:#33B">@done</span>==<span style="color:#069">false</span> <span style="color:#080;font-weight:bold">then</span>
  %a{<span style="color:#A60">:href</span>=&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">/poll/</span><span style="color:#710">&quot;</span></span>+<span style="color:#33B">@avg</span>.cryptokey} <span style="color:#036;font-weight:bold">Add</span> value</pre></td>
</tr></table>

<p><br/>
Heroku uses git to publish the applications and the workflow is:<br/><font face=Consolas size=2>
git add.<br/>
git commit -m &quot;added a before filter&nbsp;for charset utf-8&quot;<br/>
git push heroku<br/></font>
<br/>
PS. Peter, look, it validates! <a href="http://validator.w3.org/check?uri=http://average.heroku.com">http://validator.w3.org/check?uri=http%3A%2F%2Faverage.heroku.com</a> :) DS</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a></li>
    
    <li>Meta 
      
      <a href="../2009/06/11/an-average-application-in-the-clouds#comments">no comments</a>,
      <a href="../2009/06/11/an-average-application-in-the-clouds" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3375/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3375/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3374">
  <h2 class="title">
    <a href="../2009/06/09/no-var-for-me-in-the-foreach">No var for me in the foreach</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-06-09T22:24:00+02:00"><span class="typo_date" title="Tue, 09 Jun 2009 20:24:00 GMT">Tue, 09 Jun 2009 20:24:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>In C# 3.0 we got type inference or implicit typing as Microsoft likes to call it. As a Ruby programmer I've got a thing for essence over ceremony and those repetive declarations in C# (and Java) has always bothered me. So of course I quickly put <em>var</em> in my tool belt. If I want to create a certain object why should I have to state that twice?</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span style="color:#777">// C# 2.0</span>
<span style="color:#0a5;font-weight:bold">Dictionary</span>&lt;Customer, <span style="color:#0a5;font-weight:bold">List</span>&lt;PhoneNumber&gt;&gt; phonebook = <span style="color:#080;font-weight:bold">new</span> <span style="color:#0a5;font-weight:bold">Dictionary</span>&lt;Customer, <span style="color:#0a5;font-weight:bold">List</span>&lt;PhoneNumber&gt;&gt;(); 
<span style="color:#777">// C# 3.0</span>
var phonebook = <span style="color:#080;font-weight:bold">new</span> <span style="color:#0a5;font-weight:bold">Dictionary</span>&lt;Customer, <span style="color:#0a5;font-weight:bold">List</span>&lt;PhoneNumber&gt;&gt;();</pre></td>
</tr></table>

<p>Still you should use it with care. I've seen:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>var i = <span style="color:#00D">5</span>;
var s = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">This stmt is unprovable!</span><span style="color:#710">&quot;</span></span>;</pre></td>
</tr></table>

<p>And frankly, I do not agree.</p>

<p>A couple of days ago I almost thought I found a bug or limitation in the C# compiler. Something like the following would not compile:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
<a href="6#n5" name="n5">5</a>
<a href="6#n6" name="n6">6</a>
<a href="6#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a5;font-weight:bold">String</span> html = <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">&lt;a href='http://is.gd/Uoip'&gt;Recursion&lt;/a&gt;,</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span> +
              <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">see &lt;a href='http://is.gd/Uoip'&gt;recursion&lt;/a&gt;.</span><span style="color:#710">&quot;</span></span>;
<span style="color:#0a5;font-weight:bold">String</span> links=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>;
var matches = Regex.Matches(html, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">(a href=')(.*)('&gt;)</span><span style="color:#710">&quot;</span></span>);
foreach (var match in matches) {
    links+=match.Groups[<span style="color:#00D">2</span>]+<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#b0b">\r</span><span style="color:#b0b">\n</span><span style="color:#710">&quot;</span></span>;
}</pre></td>
</tr></table>

<p>The compiler complained that Object had no Groups method. How come it could not see that Regex.Matches returned a MatchCollection and that that collection was populated with Match objects? Then it dawned on me. Back in the dark ages of C# 1.x we did not have generics. MatchCollection is an old class that implements ICollection and not ICollection(T) so the compiler could not infer the type. A quick change to:<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>foreach (Match match in matches) {</pre></td>
</tr></table></p>

<p>and we were good to go.</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a></li>
    
    <li>Meta 
      
      <a href="../2009/06/09/no-var-for-me-in-the-foreach#comments">no comments</a>,
      <a href="../2009/06/09/no-var-for-me-in-the-foreach" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3374/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3374/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3302">
  <h2 class="title">
    <a href="../2009/05/16/get-the-value-of-and-with-using-the-null-coalescing-operator">Get the value of and with using the null-coalescing operator</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-05-16T00:38:00+02:00"><span class="typo_date" title="Fri, 15 May 2009 22:38:00 GMT">Fri, 15 May 2009 22:38:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>I like the <a href="http://msdn.microsoft.com/en-us/library/ms173224.aspx">?? operator</a> that surfaced in C# 2.0. I'm often in environments where null values florish and ?? is a great way to handle them, especially for presentation. A while ago I found a use for the ?? operator in a way I'd never used it before.</p>

<p>The problem at hand was to return an account number from data that could be described as somewhat inconsistent.</p>

<p>The application had left room for the users to enter accounts in two by two ways. A customer could have multiple subsidiaries and in each subsidiary, by misconception, two different fields had been used as the account number. It was also possible to connect an account to all subsidairies of a customer at the same time as a specific subsidiary of that customer had an account defined.</p>

<p>Only if a unique account could be found it should be returned. All other cases should return a cause of failure so that the users could use that information to clean up the mess.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="6#n1" name="n1">1</a>
<a href="6#n2" name="n2">2</a>
<a href="6#n3" name="n3">3</a>
<a href="6#n4" name="n4">4</a>
<a href="6#n5" name="n5">5</a>
<a href="6#n6" name="n6">6</a>
<a href="6#n7" name="n7">7</a>
<a href="6#n8" name="n8">8</a>
<a href="6#n9" name="n9">9</a>
<strong><a href="6#n10" name="n10">10</a></strong>
<a href="6#n11" name="n11">11</a>
<a href="6#n12" name="n12">12</a>
<a href="6#n13" name="n13">13</a>
<a href="6#n14" name="n14">14</a>
<a href="6#n15" name="n15">15</a>
<a href="6#n16" name="n16">16</a>
<a href="6#n17" name="n17">17</a>
<a href="6#n18" name="n18">18</a>
<a href="6#n19" name="n19">19</a>
<strong><a href="6#n20" name="n20">20</a></strong>
<a href="6#n21" name="n21">21</a>
<a href="6#n22" name="n22">22</a>
<a href="6#n23" name="n23">23</a>
<a href="6#n24" name="n24">24</a>
<a href="6#n25" name="n25">25</a>
<a href="6#n26" name="n26">26</a>
<a href="6#n27" name="n27">27</a>
<a href="6#n28" name="n28">28</a>
<a href="6#n29" name="n29">29</a>
<strong><a href="6#n30" name="n30">30</a></strong>
<a href="6#n31" name="n31">31</a>
<a href="6#n32" name="n32">32</a>
</pre></td>
  <td class="code"><pre><span style="color:#088;font-weight:bold">private</span> <span style="color:#088;font-weight:bold">static</span> Account GetCustomerAccount(Customer customer)
{
  bool hasAccount = !<span style="color:#0a5;font-weight:bold">String</span>.IsNullOrEmpty(customer.AccountNo);
  bool hasAccountNoExtra = !<span style="color:#0a5;font-weight:bold">String</span>.IsNullOrEmpty(customer.AccountNoExtra);
  bool hasAllSubsAccount = !<span style="color:#0a5;font-weight:bold">String</span>.IsNullOrEmpty(customer.AccountNoAllSubs);
  bool hasAllSubsAccountNoExtra = 
       !<span style="color:#0a5;font-weight:bold">String</span>.IsNullOrEmpty(customer.AccountNoExtraAllSubs);
  var account = <span style="color:#080;font-weight:bold">new</span> Account();

  <span style="color:#080;font-weight:bold">if</span> ((hasAccount || hasAccountNoExtra) &amp;&amp;
      (hasAllSubsAccount || hasAllSubsAccountNoExtra)) 
  {
    account.Status = account.HasBothAllSubsAndSpecific;
    <span style="color:#080;font-weight:bold">return</span> account;
  }
  <span style="color:#080;font-weight:bold">if</span> ((hasAccount &amp;&amp; hasAccountNoExtra) ||   
      (hasAllSubsAccount &amp;&amp; hasAllSubsAccountNoExtra)) 
  {
    account.Status = account.HasBothAccountAndAccountExtra;
    <span style="color:#080;font-weight:bold">return</span> account;
  }

  account.AccountNo = customer.AccountNo ??
                      customer.AccountNoExtra ??
                      customer.AccountNoAllSubs ??
                      customer.AccountNoExtraAllSubs;

  <span style="color:#080;font-weight:bold">if</span> (account.AccountNo==<span style="color:#069">null</span>)
    account.Status=account.HasNoAccountDefined;

  <span style="color:#080;font-weight:bold">return</span> account;
}</pre></td>
</tr></table>

<pre></pre>

<p>Notice how AccountNo is set to the first non null value of the four. Imagine that with plain ifs. Here I believe the ??-operator both makes the code clear and saves us from a bunch of nested ifs.</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a></li>
    
    <li>Meta 
      
      <a href="../2009/05/16/get-the-value-of-and-with-using-the-null-coalescing-operator#comments">no comments</a>,
      <a href="../2009/05/16/get-the-value-of-and-with-using-the-null-coalescing-operator" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3302/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3302/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3259">
  <h2 class="title">
    <a href="../2009/05/03/breaking-good">Breaking good</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-05-03T23:24:00+02:00"><span class="typo_date" title="Sun, 03 May 2009 21:24:00 GMT">Sun, 03 May 2009 21:24:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>Check out <a href="http://www.veracode.com/blog/2009/04/decoding-the-dbir-2009-cover/">Chris Eng's post</a> on how he broke the code on the cover of the  <a href="http://www.verizonbusiness.com/resources/security/reports/2009_databreach_rp.pdf">2009 Verizon Data Breach Investigations Report</a>. He makes it seem so simple and without making a big deal of it he also shows the tools and commands he used.</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/security" rel="noindex, follow, tag">Security</a></li>
    
    <li>Meta 
      
      <a href="../2009/05/03/breaking-good#comments">no comments</a>,
      <a href="../2009/05/03/breaking-good" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3259/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3259/feed.xml">atom</a>   
    </li>
  </ul>
</div>


<p class="pagination">Older posts: <a href="1">1</a> ...  <a href="4">4</a> <a href="5">5</a> 6 <a href="7">7</a> <a href="8">8</a>  ... <a href="12">12</a></p>

      <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
    </div>

    <div id="sidebar">
      <!-- search -->
      <div id="search" class="search">
<!--	<form action="/articles/search" id="sform" method="get">
	  <p><input type="text" id="q" name="q" value="" /></p>
	</form>
	
	<div id="loading" class="loading" style="display:none;">Searching...</div>
	<div id="results" class="results"></div>
  <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('loading')}, onLoading:function(request){Element.show('loading')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script>
-->
</div>


      <!-- sidebar components -->
      
      
<div class="sidebar-node">
  <h3></h3>
<a href="http://stackoverflow.com/users/44620/jonas-elfstrom">
<img src="http://stackoverflow.com/users/flair/44620.png" width="208" height="58" alt="Stack Overflow profile for Jonas Elfström" title="Stack Overflow profile for Jonas Elfström">
</a>
<ul>
<li><nobr><a href="../../pages/AboutMe">About me</a>/<a href="../../pages/OmMig">Om mig</a></nobr></li>
</ul>
<a href="https://gist.github.com/jonelf">Public Gists</a><br><a href="http://jonelf.posterous.com/">Posterous</a><br><br>
<b>Recommended reading</b><br/><a href="http://www.amazon.com/gp/product/0385495323?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385495323">The Code Book</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385495323" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/>
<a href="http://www.amazon.com/gp/product/0385493622?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385493622">Fermat's Enigma</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385493622" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0399156828?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0399156828">Zero History</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0399156828" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0470474246?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0470474246">Cryptography Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0470474246" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/><br/>

</div>


  


    </div>
    <br style="clear:both;" />
  </div>

  <div id="footer">
    <hr />
    <p><a href="../../index.html">Alice, Bob, and Mallory</a></p>
    <ul>
      <li>powered by <a href="http://typosphere.org">typo</a> /
          styled with <a href="http://quotedprintable.com/pages/scribbish">scribbish</a></li>
    </ul>
  </div>
</div>
</body>
</html>
