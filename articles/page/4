<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Alice, Bob, and Mallory</title>
  <meta name="viewport" content="width=device-width; initial-scale=1.0;">
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="../../xml/rsd" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="../../xml/atom/feed.xml" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="../../xml/rss20/feed.xml" />
  <script src="../../javascripts/cookies.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/prototype.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/effects.js?1170454372" type="text/javascript"></script>
  <script src="../../javascripts/typo.js?1170454372" type="text/javascript"></script>
  
  <script type="text/javascript"></script>
  <link href="../../stylesheets/theme/application.css?1357773761" media="all" rel="Stylesheet" type="text/css" />
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-4453587-1");
pageTracker._trackPageview();
} catch(err) {}
</script>
</head>

<body>
<div id="container">
  <div id="header">
    <h1><span><a href="../../index.html">Alice, Bob, and Mallory</a></span></h1>
    <h2>metasyntactics</h2>
  </div>

  <div id="page">
    <div id="content">
      <div class="atomentry" id="article-3982">
  <h2 class="title">
    <a href="../2010/02/03/c-implicit-string-conversion">C# implicit string conversion</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2010-02-03T17:32:00+01:00"><span class="typo_date" title="Wed, 03 Feb 2010 16:32:00 GMT">Wed, 03 Feb 2010 16:32:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>I know how it works and I think I can see why but I'm still not very fond of how eager C# is to perform implicit string conversion.</p>

<p>Contrived example:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>string s = -<span style="color:#00D">42</span> + <span style="color:#D20">'+'</span> + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">+</span><span style="color:#710">&quot;</span></span> + -<span style="color:#60E">0</span><span style="color:#60E">.1</span> / -<span style="color:#60E">0</span><span style="color:#60E">.1</span> + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">=</span><span style="color:#710">&quot;</span></span> + (<span style="color:#00D">7</span> ^ <span style="color:#00D">5</span>) + 
      <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> is </span><span style="color:#710">&quot;</span></span> + <span style="color:#069">true</span> + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20"> and not </span><span style="color:#710">&quot;</span></span> + AddressFamily.Unknown;</pre></td>
</tr></table>

<p>s will be set to <font color="white">"1+1=2 is True and not Unknown"</font></p>

<p>The answer is in white text above, select the text to see it.</p>

<p>A more real problem is something like this</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre>
</pre></td>
  <td class="code"><pre>string str = <span style="color:#00D">1</span> + <span style="color:#00D">2</span> + <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">!=</span><span style="color:#710">&quot;</span></span> + <span style="color:#00D">1</span> + <span style="color:#00D">2</span>;</pre></td>
</tr></table>

<p><code>str</code> will be set to "3!=12".</p>

<p><font style="color:red">Edit 2010-02-08</font><br/>
This wouldn't be much of a problem if all objects in .NET always returned a decent string representation of their current state/value with ToString() but that's not the case. <a href="http://msdn.microsoft.com/en-us/library/system.object.tostring.aspx">Instead</a> "The default implementation returns the fully qualified name of the type of the Object.".<br/>
I don't like the inconsistency. It's way too late now but I think it would have been much better if only objects that really produces a human readable output of the data in the object should implement ToString(). If you want the name of the type of the Object there should be another way.</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a></li>
    
    <li>Meta 
      
      <a href="../2010/02/03/c-implicit-string-conversion#comments">no comments</a>,
      <a href="../2010/02/03/c-implicit-string-conversion" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3982/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3982/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3977">
  <h2 class="title">
    <a href="../2010/02/02/string-concatenation-in-ruby">String concatenation in Ruby</a> 
    <span class="comment_count">5</span>
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2010-02-02T00:04:00+01:00"><span class="typo_date" title="Mon, 01 Feb 2010 23:04:00 GMT">Mon, 01 Feb 2010 23:04:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Knit-schematic.png/200px-Knit-schematic.png" style="display: inline-block; float:right"/>
There's no <code>StringBuilder</code> class in Ruby because the <a href="http://ruby-doc.org/core/classes/String.html">String</a> class has the <a href="http://ruby-doc.org/core/classes/String.html#M000807">&lt;&lt;</a> for appending. The problem is that not every Ruby programmer seems to be aware of it. Recently I've seen <code>+=</code> being used to append to strings where <code>&lt;&lt;</code> would have been a much better choice.</p>

<p>The problem with using <code>+=</code> is that it creates a new String instance and if you do that in a loop you can get really horrible performance.</p>

<p>If you are dealing with an array you don't even have to use <code>&lt;&lt;</code> because <a href="http://ruby-doc.org/core/classes/Array.html#M002182">Array#join</a> is even faster and shows intent in a nice way.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
<a href="4#n8" name="n8">8</a>
<a href="4#n9" name="n9">9</a>
<strong><a href="4#n10" name="n10">10</a></strong>
<a href="4#n11" name="n11">11</a>
<a href="4#n12" name="n12">12</a>
<a href="4#n13" name="n13">13</a>
<a href="4#n14" name="n14">14</a>
<a href="4#n15" name="n15">15</a>
<a href="4#n16" name="n16">16</a>
<a href="4#n17" name="n17">17</a>
<a href="4#n18" name="n18">18</a>
<a href="4#n19" name="n19">19</a>
<strong><a href="4#n20" name="n20">20</a></strong>
<a href="4#n21" name="n21">21</a>
<a href="4#n22" name="n22">22</a>
</pre></td>
  <td class="code"><pre>require <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">benchmark</span><span style="color:#710">'</span></span>

array_of_rnd_strings=(<span style="color:#00D">0</span>...<span style="color:#00D">262144</span>).map{<span style="color:#00D">65</span>.+(rand(<span style="color:#00D">25</span>)).chr}
                                 .join.scan(<span style="background-color:hsla(300,100%,50%,0.06)"><span style="color:#404">/</span><span style="color:#808">.{1,8}</span><span style="color:#404">/</span><span style="color:#C2C">m</span></span>)

<span style="color:#036;font-weight:bold">Benchmark</span>.bm <span style="color:#080;font-weight:bold">do</span> |benchmark|
  benchmark.report <span style="color:#080;font-weight:bold">do</span>
    str=array_of_rnd_strings.join
  <span style="color:#080;font-weight:bold">end</span>
  benchmark.report <span style="color:#080;font-weight:bold">do</span>
    str2=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>
    array_of_rnd_strings.each <span style="color:#080;font-weight:bold">do</span> |s|
      str2&lt;&lt;s
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
  benchmark.report <span style="color:#080;font-weight:bold">do</span>
    str3=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#710">&quot;</span></span>
    array_of_rnd_strings.each <span style="color:#080;font-weight:bold">do</span> |s|
      str3+=s
    <span style="color:#080;font-weight:bold">end</span>
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>


The array_of_rnd_strings is an array of 32768 8 characters long random strings.
<br/>
<br/>
<table>
<thead><tr>
<td><b>user</b></td><td><b>system</b></td><td><b>total</b></td><td><b>real</b></td>
</tr>
</thead>
<tbody>
<tr>    
<td>0.030000</td><td>0.000000</td><td>0.030000</td><td>(  0.027184)</td>
</tr>
<tr>
    <td>0.160000</td><td>0.010000</td><td>0.170000</td><td>(  0.190277)</td>
</tr>
<tr>
<td>106.020000</td><td>0.300000</td><td>106.320000</td><td>(113.457793)</td>
</tr>
</tbody>
</table>

<p><br/></p>

<p>The performance of <code>+=</code> was even <strong>worse</strong> than I imagined!</p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a></li>
    
    <li>Meta 
      
      <a href="../2010/02/02/string-concatenation-in-ruby#comments">5 comments</a>,
      <a href="../2010/02/02/string-concatenation-in-ruby" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3977/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3977/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3905">
  <h2 class="title">
    <a href="../2010/01/14/prime-factorization-in-parallel">Finding primes in parallel</a> 
    <span class="comment_count">19</span>
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2010-01-14T22:55:00+01:00"><span class="typo_date" title="Thu, 14 Jan 2010 21:55:00 GMT">Thu, 14 Jan 2010 21:55:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p><a href="http://www.codethinked.com/page/About-Me.aspx">Justin Etheredge</a> has been blogging about his <a href="http://www.codethinked.com/post/2010/01/08/TekPubs-Mastering-LINQ-Challenge.aspx">challenge</a> to find prime numbers with LINQ. He <a href="http://www.codethinked.com/post/2010/01/10/The-TekPub-LINQ-Challenge-Part-2-Faster-Algorithms.aspx">later</a> used <code>AsParallel()</code> (coming in .NET 4) to speed things up and then followed that up with <a href="http://www.codethinked.com/post/2010/01/12/The-TekPub-LINQ-Challenge-And-The-Sieve-Of-Eratosthenes.aspx">a post</a> about using <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">The Sieve Of Eratosthenes</a>.</p>

<p>As you can see in the comments of those posts I tried to speed the Sieve of Eratosthenes up by using <code>Parallel.For</code> in the inner loop. I also tried AsParallel() in the LINQ expression but it made no difference in either case. At most it got 5% faster. I'm not sure but it could be that because SoE is very memory intense we could have a scaling issue and maybe also memory bandwidth exhaustion. This is mere speculation.</p>

<p>I then searched for other algorithms and found <a href="http://en.wikipedia.org/wiki/Sieve_of_Atkin">The Sieve of Atkin</a>. It uses less memory than SoE so I thought I'd give it a try.</p>

<p>I set the limit to 20,000,000 and then benchmarked it. It timed in on 2.48s so actually worse than the 2.2s that SoE took. Not good!
Then I added <code>Parallel.For</code> in the loop that did most of the work and  lo and behold, it scaled! I have two cores in my machine (T7200@2.0GHz) and the average runtime went down to 1.26s. That's almost linear and surprisingly good! If you happen have a quad core (or more) and feel like trying it out then please contact me. It would be interesting to see if it scales further. </p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
<a href="4#n8" name="n8">8</a>
<a href="4#n9" name="n9">9</a>
<strong><a href="4#n10" name="n10">10</a></strong>
<a href="4#n11" name="n11">11</a>
<a href="4#n12" name="n12">12</a>
<a href="4#n13" name="n13">13</a>
<a href="4#n14" name="n14">14</a>
<a href="4#n15" name="n15">15</a>
<a href="4#n16" name="n16">16</a>
<a href="4#n17" name="n17">17</a>
<a href="4#n18" name="n18">18</a>
<a href="4#n19" name="n19">19</a>
<strong><a href="4#n20" name="n20">20</a></strong>
<a href="4#n21" name="n21">21</a>
<a href="4#n22" name="n22">22</a>
<a href="4#n23" name="n23">23</a>
<a href="4#n24" name="n24">24</a>
<a href="4#n25" name="n25">25</a>
<a href="4#n26" name="n26">26</a>
<a href="4#n27" name="n27">27</a>
<a href="4#n28" name="n28">28</a>
<a href="4#n29" name="n29">29</a>
<strong><a href="4#n30" name="n30">30</a></strong>
<a href="4#n31" name="n31">31</a>
<a href="4#n32" name="n32">32</a>
<a href="4#n33" name="n33">33</a>
<a href="4#n34" name="n34">34</a>
<a href="4#n35" name="n35">35</a>
<a href="4#n36" name="n36">36</a>
<a href="4#n37" name="n37">37</a>
<a href="4#n38" name="n38">38</a>
<a href="4#n39" name="n39">39</a>
<strong><a href="4#n40" name="n40">40</a></strong>
<a href="4#n41" name="n41">41</a>
<a href="4#n42" name="n42">42</a>
<a href="4#n43" name="n43">43</a>
<a href="4#n44" name="n44">44</a>
<a href="4#n45" name="n45">45</a>
<a href="4#n46" name="n46">46</a>
</pre></td>
  <td class="code"><pre><span style="color:#088;font-weight:bold">static</span> List&lt;<span style="color:#0a5;font-weight:bold">int</span>&gt; FindPrimesBySieveOfAtkins(<span style="color:#0a5;font-weight:bold">int</span> max)
{
   <span style="color:#777">//  var isPrime = new BitArray((int)max+1, false); </span>
   <span style="color:#777">//  Can't use BitArray because of threading issues.</span>

    var isPrime = new <span style="color:#0a5;font-weight:bold">bool</span>[max + <span style="color:#00D">1</span>];
    var sqrt = (<span style="color:#0a5;font-weight:bold">int</span>)Math.Sqrt(max);

    Parallel.For(<span style="color:#00D">1</span>, sqrt, x =&gt;
    {
        var xx = x * x;
        <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a5;font-weight:bold">int</span> y = <span style="color:#00D">1</span>; y &lt;= sqrt; y++)
        {
            var yy = y * y;
            var n = <span style="color:#00D">4</span> * xx + yy;
            <span style="color:#080;font-weight:bold">if</span> (n &lt;= max &amp;&amp; (n % <span style="color:#00D">12</span> == <span style="color:#00D">1</span> || n % <span style="color:#00D">12</span> == <span style="color:#00D">5</span>))
                isPrime[n] ^= <span style="color:#069">true</span>;

            n = <span style="color:#00D">3</span> * xx + yy;
            <span style="color:#080;font-weight:bold">if</span> (n &lt;= max &amp;&amp; n % <span style="color:#00D">12</span> == <span style="color:#00D">7</span>)
                isPrime[n] ^= <span style="color:#069">true</span>;

            n = <span style="color:#00D">3</span> * xx - yy;
            <span style="color:#080;font-weight:bold">if</span> (x &gt; y &amp;&amp; n &lt;= max &amp;&amp; n % <span style="color:#00D">12</span> == <span style="color:#00D">11</span>)
                isPrime[n] ^= <span style="color:#069">true</span>;
        }
    });

    var primes = new List&lt;<span style="color:#0a5;font-weight:bold">int</span>&gt;() { <span style="color:#00D">2</span>, <span style="color:#00D">3</span> };
    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a5;font-weight:bold">int</span> n = <span style="color:#00D">5</span>; n &lt;= sqrt; n++)
    {
        <span style="color:#080;font-weight:bold">if</span> (isPrime[n])
        {
            primes.Add(n);
            <span style="color:#0a5;font-weight:bold">int</span> nn = n * n;
            <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a5;font-weight:bold">int</span> k = nn; k &lt;= max; k += nn)
                isPrime[k] = <span style="color:#069">false</span>;
        }
    }

    <span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a5;font-weight:bold">int</span> n = sqrt + <span style="color:#00D">1</span>; n &lt;= max; n++)
        <span style="color:#080;font-weight:bold">if</span> (isPrime[n])
            primes.Add(n);

    <span style="color:#080;font-weight:bold">return</span> primes;
}</pre></td>
</tr></table>

<p>This code needs C# 4.0 to compile.
<br><br>
<font style="color:red;font-weight:bold">Edit 2010-12-14</font></p>

<p>Dommer <a href="http://stackoverflow.com/questions/1569127/c-implementation-of-the-sieve-of-atkin/2070579#2070579">found out</a> that the BitArray implementation had some serious threading issues.
I had my worries about the non thread safe characteristics of BitArray but I thought that the isPrime[n] ^= true; was an atomic operation and that it didn't matter in what order bit bits was flipped would make it possible to use anyway. Not so. Changed it to a boolean array and that seems to rock the boat but of course at a much higher memory cost.
<br><br>
<font style="color:red;font-weight:bold">Edit 2010-01-20</font></p>

<p>Indications are that this does in fact not scale very good on a quad core. It's even worse, it seems it scales good on my old T7200 but not on a dual core E6320. I don't know why but of course the shared state of the <strong>isPrime</strong> <code>BitArray</code> is a huge problem and maybe it could be that differences in CPU architecture (FSB speed, caches and so on) in the E6320 is an explanation. Average execution time on the E6320 was 1290ms in a single thread and 1064ms in two.</p>

<p>If you want to try this in an older version of C# than 4.0 then check out <a href="http://coding-time.blogspot.com/2008/03/implement-your-own-parallelfor-in-c.html">this post</a>.</p>

<p>A reader asked how I timed the executions. Here's how.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
<a href="4#n8" name="n8">8</a>
<a href="4#n9" name="n9">9</a>
<strong><a href="4#n10" name="n10">10</a></strong>
<a href="4#n11" name="n11">11</a>
<a href="4#n12" name="n12">12</a>
<a href="4#n13" name="n13">13</a>
</pre></td>
  <td class="code"><pre>var steps = new List&lt;<span style="color:#0a5;font-weight:bold">long</span>&gt;();
var watch = new Stopwatch();

<span style="color:#080;font-weight:bold">for</span> (<span style="color:#0a5;font-weight:bold">int</span> i = <span style="color:#00D">0</span>; i &lt; <span style="color:#00D">10</span>; i++) 
{
    watch.Reset();
    watch.Start();
    var primes = FindPrimesBySieveOfAtkins(<span style="color:#00D">20000000</span>);
    watch.Stop();
    Console.WriteLine(watch.ElapsedMilliseconds.ToString());
    steps.Add(watch.ElapsedMilliseconds);
}
Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Average: </span><span style="color:#710">&quot;</span></span> + steps.Average().ToString());</pre></td>
</tr></table>

<p><br><br>
<font style="color:red;font-weight:bold">Edit 2010-10-24</font>
<br><br>
Tom's code from the comment below</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
<a href="4#n8" name="n8">8</a>
<a href="4#n9" name="n9">9</a>
<strong><a href="4#n10" name="n10">10</a></strong>
<a href="4#n11" name="n11">11</a>
<a href="4#n12" name="n12">12</a>
<a href="4#n13" name="n13">13</a>
<a href="4#n14" name="n14">14</a>
<a href="4#n15" name="n15">15</a>
<a href="4#n16" name="n16">16</a>
<a href="4#n17" name="n17">17</a>
<a href="4#n18" name="n18">18</a>
<a href="4#n19" name="n19">19</a>
<strong><a href="4#n20" name="n20">20</a></strong>
<a href="4#n21" name="n21">21</a>
<a href="4#n22" name="n22">22</a>
<a href="4#n23" name="n23">23</a>
<a href="4#n24" name="n24">24</a>
<a href="4#n25" name="n25">25</a>
<a href="4#n26" name="n26">26</a>
<a href="4#n27" name="n27">27</a>
<a href="4#n28" name="n28">28</a>
<a href="4#n29" name="n29">29</a>
<strong><a href="4#n30" name="n30">30</a></strong>
<a href="4#n31" name="n31">31</a>
<a href="4#n32" name="n32">32</a>
<a href="4#n33" name="n33">33</a>
<a href="4#n34" name="n34">34</a>
<a href="4#n35" name="n35">35</a>
<a href="4#n36" name="n36">36</a>
<a href="4#n37" name="n37">37</a>
<a href="4#n38" name="n38">38</a>
<a href="4#n39" name="n39">39</a>
<strong><a href="4#n40" name="n40">40</a></strong>
<a href="4#n41" name="n41">41</a>
<a href="4#n42" name="n42">42</a>
<a href="4#n43" name="n43">43</a>
<a href="4#n44" name="n44">44</a>
<a href="4#n45" name="n45">45</a>
<a href="4#n46" name="n46">46</a>
<a href="4#n47" name="n47">47</a>
<a href="4#n48" name="n48">48</a>
<a href="4#n49" name="n49">49</a>
<strong><a href="4#n50" name="n50">50</a></strong>
<a href="4#n51" name="n51">51</a>
<a href="4#n52" name="n52">52</a>
<a href="4#n53" name="n53">53</a>
<a href="4#n54" name="n54">54</a>
<a href="4#n55" name="n55">55</a>
<a href="4#n56" name="n56">56</a>
<a href="4#n57" name="n57">57</a>
<a href="4#n58" name="n58">58</a>
<a href="4#n59" name="n59">59</a>
<strong><a href="4#n60" name="n60">60</a></strong>
<a href="4#n61" name="n61">61</a>
<a href="4#n62" name="n62">62</a>
<a href="4#n63" name="n63">63</a>
<a href="4#n64" name="n64">64</a>
<a href="4#n65" name="n65">65</a>
<a href="4#n66" name="n66">66</a>
<a href="4#n67" name="n67">67</a>
<a href="4#n68" name="n68">68</a>
<a href="4#n69" name="n69">69</a>
<strong><a href="4#n70" name="n70">70</a></strong>
<a href="4#n71" name="n71">71</a>
<a href="4#n72" name="n72">72</a>
<a href="4#n73" name="n73">73</a>
<a href="4#n74" name="n74">74</a>
<a href="4#n75" name="n75">75</a>
<a href="4#n76" name="n76">76</a>
<a href="4#n77" name="n77">77</a>
<a href="4#n78" name="n78">78</a>
<a href="4#n79" name="n79">79</a>
<strong><a href="4#n80" name="n80">80</a></strong>
<a href="4#n81" name="n81">81</a>
<a href="4#n82" name="n82">82</a>
<a href="4#n83" name="n83">83</a>
<a href="4#n84" name="n84">84</a>
</pre></td>
  <td class="code"><pre>using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Numerics; 
using System.Text; 
using System.Threading.Tasks;

namespace Calculate_Primes 
{ 
    class Program 
    { 
        private <span style="color:#088;font-weight:bold">const</span> <span style="color:#0a5;font-weight:bold">int</span> _NUMBER_OF_DIGITS = <span style="color:#00D">100</span>;

        <span style="color:#088;font-weight:bold">static</span> <span style="color:#088;font-weight:bold">void</span> Main(string[] args)
        {
            BigInteger floor = BigInteger.Parse(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">1</span><span style="color:#710">&quot;</span></span> + string.Empty.PadLeft(_NUMBER_OF_DIGITS - <span style="color:#00D">1</span>, <span style="color:#D20">'0'</span>));
            BigInteger ceiling = BigInteger.Parse(string.Empty.PadLeft(_NUMBER_OF_DIGITS, <span style="color:#D20">'9'</span>));

            Console.WindowWidth = <span style="color:#00D">150</span>;

            <span style="color:#777">//var primes = Enumerable.Range(floor, ceiling).Where(n =&gt; Enumerable.Range(1, n).Where(m =&gt; (n / m) * m == n).Count() == 2);</span>

            Console.Clear();
            _calculatePrimes(floor, ceiling, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">C:</span><span style="color:#b0b">\\</span><span style="color:#D20">100 digit primes.txt</span><span style="color:#710">&quot;</span></span>);

            Console.Clear();
            _calculatePrimes(floor, ceiling, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">C:</span><span style="color:#b0b">\\</span><span style="color:#D20">300 digit primes.txt</span><span style="color:#710">&quot;</span></span>);
        }

        <span style="color:#088;font-weight:bold">static</span> IEnumerable&lt;BigInteger&gt; Range(BigInteger fromInclusive, BigInteger toInclusive)
        {
            <span style="color:#080;font-weight:bold">for</span> (BigInteger i = fromInclusive; i &lt;= toInclusive; i++)
                yield <span style="color:#080;font-weight:bold">return</span> i;
        }

        <span style="color:#088;font-weight:bold">static</span> <span style="color:#088;font-weight:bold">void</span> ParallelFor(BigInteger fromInclusive, BigInteger toInclusive, Action&lt;BigInteger&gt; body)
        {
            Parallel.ForEach(Range(fromInclusive, toInclusive), body);
        } 

        <span style="color:#088;font-weight:bold">static</span> <span style="color:#088;font-weight:bold">void</span> _calculatePrimes(BigInteger floor, BigInteger ceiling, string resultsFileFilepath)
        {
            using (System.IO.FileStream fs = new System.IO.FileStream(resultsFileFilepath, System.IO.FileMode.Create)) { }

            using (System.IO.StreamWriter sw = new System.IO.StreamWriter(resultsFileFilepath))
            {
                ParallelFor(floor, ceiling, i =&gt;
                    {
                        <span style="color:#080;font-weight:bold">if</span> (_isPrime(i))
                        {
                            lock (sw)
                            {
                                sw.Write(i.ToString() + System.Environment.NewLine);
                                sw.Flush();
                            }
                        }
                    });
            }
        }

        <span style="color:#088;font-weight:bold">static</span> <span style="color:#0a5;font-weight:bold">bool</span> _isPrime(BigInteger number)
        {
            <span style="color:#0a5;font-weight:bold">bool</span> returnValue = <span style="color:#069">true</span>;

            Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Checking {0} for primality.</span><span style="color:#710">&quot;</span></span>, number.ToString());

            <span style="color:#080;font-weight:bold">if</span> ((number &lt; <span style="color:#00D">2</span>) || (number &gt; <span style="color:#00D">2</span> &amp;&amp; number.IsEven) || (number &gt; <span style="color:#00D">2</span> &amp;&amp; number.IsPowerOfTwo))
                returnValue = <span style="color:#069">false</span>;
            <span style="color:#080;font-weight:bold">else</span>
                <span style="color:#080;font-weight:bold">for</span> (BigInteger i = <span style="color:#00D">2</span>; i * i &lt;= number; i++)
                {
                    <span style="color:#080;font-weight:bold">if</span> (number % i == <span style="color:#00D">0</span>)
                        returnValue = <span style="color:#069">false</span>;
                }

            <span style="color:#080;font-weight:bold">if</span>(returnValue)
                Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">         {0} IS prime.</span><span style="color:#710">&quot;</span></span>, number.ToString());
            <span style="color:#080;font-weight:bold">else</span>
                Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">         {0} IS NOT prime.</span><span style="color:#710">&quot;</span></span>, number.ToString());

            <span style="color:#080;font-weight:bold">return</span> returnValue;
        }
    }
}</pre></td>
</tr></table>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a>, <a href="http://alicebobandmallory.com/articles/category/math" rel="noindex, follow, tag">Math</a></li>
    
    <li>Meta 
      
      <a href="../2010/01/14/prime-factorization-in-parallel#comments">19 comments</a>,
      <a href="../2010/01/14/prime-factorization-in-parallel" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3905/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3905/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3815">
  <h2 class="title">
    <a href="../2009/11/02/comparing-instance-variables-in-ruby">Comparing instance variables in Ruby</a> 
    
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-11-02T22:50:00+01:00"><span class="typo_date" title="Mon, 02 Nov 2009 21:50:00 GMT">Mon, 02 Nov 2009 21:50:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>Say you have two objects of the same class and you want to know what differs between them. Well actually you just want to know the instance variables in object <em><strong>b</strong></em> that differs from the ones in object <em><strong>a</strong></em>.</p>

<p>To begin with, we need a class. I like cheese.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Cheese</span>
  attr_accessor <span style="color:#A60">:name</span>, <span style="color:#A60">:weight</span>, <span style="color:#A60">:expire_date</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">initialize</span>(name, weight, expire_date)
    <span style="color:#33B">@name</span>, <span style="color:#33B">@weight</span>, <span style="color:#33B">@expire_date</span> = name, weight, expire_date
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>

<pre></pre>

<p>Then we need some <strike>cheese</strike> objects.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>stilton=<span style="color:#036;font-weight:bold">Cheese</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Stilton</span><span style="color:#710">'</span></span>, <span style="color:#00D">250</span>, <span style="color:#036;font-weight:bold">Date</span>.parse(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2009-11-02</span><span style="color:#710">&quot;</span></span>))
gorgonzola=<span style="color:#036;font-weight:bold">Cheese</span>.new(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">Gorgonzola</span><span style="color:#710">'</span></span>, <span style="color:#00D">250</span>, <span style="color:#036;font-weight:bold">Date</span>.parse(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">2009-11-17</span><span style="color:#710">&quot;</span></span>))</pre></td>
</tr></table>

<pre></pre>

<p>With only <em>name</em>, <em>weight</em> and an <em>expiration date</em> it would be easy to compare those but imagine that these two objects has 42 properties. It does not stop there, you are being asked to compare 24 different classes in this way. Are you cringing yet?</p>

<p><code>Object#instance_variables</code> to the rescue! Well, that and a small hack by me. Below I add a new method called <code>instance_variables_compare</code> to <code>Object</code>. The long method name is because I wanted to follow the naming already in place. Usually I prefer to do these kind of things as a <code>module</code> and then <code>include</code> them where appropriate but in this case I find that a <a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey patch</a> will do.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
</pre></td>
  <td class="code"><pre><span style="color:#080;font-weight:bold">class</span> <span style="color:#B06;font-weight:bold">Object</span>
  <span style="color:#080;font-weight:bold">def</span> <span style="color:#06B;font-weight:bold">instance_variables_compare</span>(o)
    <span style="color:#036;font-weight:bold">Hash</span>[*<span style="color:#069">self</span>.instance_variables.map {|v|
      <span style="color:#069">self</span>.instance_variable_get(v)!=o.instance_variable_get(v) ? 
      [v,o.instance_variable_get(v)] : []}.flatten]
  <span style="color:#080;font-weight:bold">end</span>
<span style="color:#080;font-weight:bold">end</span></pre></td>
</tr></table>

<pre></pre>

<p>It returns the instance variables that differs as a <a href="http://ruby-doc.org/core/classes/Hash.html">hash</a> because it's handy and because I like it that way.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
<a href="4#n7" name="n7">7</a>
<a href="4#n8" name="n8">8</a>
<a href="4#n9" name="n9">9</a>
<strong><a href="4#n10" name="n10">10</a></strong>
</pre></td>
  <td class="code"><pre>&gt;&gt; stilton.instance_variables_compare(gorgonzola)
=&gt; {<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@name</span><span style="color:#710">&quot;</span></span>=&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Gorgonzola</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@expire_date</span><span style="color:#710">&quot;</span></span>=&gt;<span style="color:#777">#&lt;Date: 4910305/2,0,2299161&gt;}</span>
&gt;&gt; gorgonzola.instance_variables_compare(stilton)
=&gt; {<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@name</span><span style="color:#710">&quot;</span></span>=&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Stilton</span><span style="color:#710">&quot;</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@expire_date</span><span style="color:#710">&quot;</span></span>=&gt;<span style="color:#777">#&lt;Date: 4910275/2,0,2299161&gt;}</span>
&gt;&gt; stilton.expire_date=gorgonzola.expire_date
=&gt; <span style="color:#777">#&lt;Date: 4910305/2,0,2299161&gt;</span>
&gt;&gt; stilton.instance_variables_compare(gorgonzola)
=&gt; {<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">@name</span><span style="color:#710">&quot;</span></span>=&gt;<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Gorgonzola</span><span style="color:#710">&quot;</span></span>}
&gt;&gt; stilton.instance_variables_compare(stilton)
=&gt; {}</pre></td>
</tr></table>

<pre></pre>

<p>If you ever think of using this code you should be aware of two things.</p>

<ol>
<li>This code is very untested and comes with no guarantees.</li>
<li>Since instance variables <strong>spring into life the first time they are assigned to</strong> you either have to work with objects that always initialize everything or you have to change <code>instance_variables_compare</code> to handle this.</li>
</ol>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a></li>
    
    <li>Meta 
      
      <a href="../2009/11/02/comparing-instance-variables-in-ruby#comments">no comments</a>,
      <a href="../2009/11/02/comparing-instance-variables-in-ruby" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3815/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3815/feed.xml">atom</a>   
    </li>
  </ul>
</div>
<div class="atomentry" id="article-3774">
  <h2 class="title">
    <a href="../2009/10/20/infinite-ranges-in-c">Infinite ranges in C#</a> 
    <span class="comment_count">2</span>
  </h2>

  <p class="author">
    Posted by <cite>Jonas Elfström</cite>
    <abbr class="published" title="2009-10-20T20:41:00+02:00"><span class="typo_date" title="Tue, 20 Oct 2009 18:41:00 GMT">Tue, 20 Oct 2009 18:41:00 GMT</span></abbr>
  </p>

  <div class="content">
    <p>I <a href="http://blogs.msdn.com/ericlippert/archive/2009/10/15/as-timeless-as-infinity.aspx">recently learned</a> that C# is compliant with the <a href="http://en.wikipedia.org/wiki/IEEE_754-1985">IEEE 754-1985</a> for floating point arithmetics. That wasn't a big surprise but that <a href="http://en.wikipedia.org/wiki/Division_by_zero#In_computer_arithmetic">division by zero</a> is defined as <code>Infinity</code> in it was! It actually kind of bothers me that I didn't know this.</p>

<p>In mathematics division by zero is <a href="http://en.wikipedia.org/wiki/Defined_and_undefined">undefined</a> for real numbers but I guess <code>Infinity</code> is a more pragmatic result. Or as a friend put it <em>"IEEE stands for Institute of Electrical and Electronics Engineers not Institute of Mathematics"</em></p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a5;font-weight:bold">double</span> n = <span style="color:#60E">1</span><span style="color:#60E">.0</span>;
n = n / <span style="color:#00D">0</span>;
<span style="color:#080;font-weight:bold">if</span> (n &gt; <span style="color:#00D">636413622384679305</span>)
  System.Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Yes it certainly is!</span><span style="color:#710">&quot;</span></span>);</pre></td>
</tr></table>

<p><br/>
This C# code does not throw an exception, it simply leaves n defined as Infinity and writes a line to the console.</p>

<p>Ruby is <a href="http://weblog.jamisbuck.org/2007/2/7/infinity">also</a> IEEE 754-1985 compliant. It even lets you define <a href="http://banisterfiend.wordpress.com/2009/10/02/wtf-infinite-ranges-in-ruby/">infinite ranges</a>.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre><span style="color:#036;font-weight:bold">Infinity</span>=<span style="color:#60E">1.0</span>/<span style="color:#00D">0</span>
=&gt;<span style="color:#036;font-weight:bold">Infinity</span>
(<span style="color:#00D">1</span>..<span style="color:#036;font-weight:bold">Infinity</span>).include?(<span style="color:#00D">162259276829213363391578010288127</span>)
=&gt; <span style="color:#069">true</span>
(<span style="color:#00D">7</span>..<span style="color:#036;font-weight:bold">Infinity</span>).step(<span style="color:#00D">7</span>).take(<span style="color:#00D">3</span>).inject(&amp;<span style="color:#A60">:+</span>) <span style="color:#777"># 7+14+21</span>
=&gt; <span style="color:#00D">42</span></pre></td>
</tr></table>

<p><br/>
I can't say I see very much <a href="http://www.michaelharrison.ws/weblog/?p=163">use</a> of this but it brings a kind of completeness to the handling of infinities. Unfortunately it seems we don't get that in C# out of the box because <code>Enumerable.Range</code> takes <code>&lt;int&gt;,&lt;int&gt;</code> as parameters and there's no <code>Infinity</code> definition for <code>int</code>.  That's unless someone wrote a generic Range class. Turns out <a href="http://stackoverflow.com/users/22656/jon-skeet">none other</a> than <a href="http://www.yoda.arachsys.com/csharp/">Jon Skeet</a> did in his <a href="http://www.yoda.arachsys.com/csharp/miscutil/">MiscUtil</a>. Download MiscUtil and then by <code>using MiscUtil.Collections;</code> you can:</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
<a href="4#n3" name="n3">3</a>
<a href="4#n4" name="n4">4</a>
<a href="4#n5" name="n5">5</a>
<a href="4#n6" name="n6">6</a>
</pre></td>
  <td class="code"><pre><span style="color:#0a5;font-weight:bold">double</span> n = <span style="color:#60E">1</span><span style="color:#60E">.0</span>;
var infinity = n / <span style="color:#00D">0</span>;
var r = new Range&lt;<span style="color:#0a5;font-weight:bold">double</span>&gt;(<span style="color:#00D">0</span>, infinity);
<span style="color:#080;font-weight:bold">if</span> (r.Contains(<span style="color:#00D">4711</span>))
  System.Console.WriteLine(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">Yes it certainly does!</span><span style="color:#710">&quot;</span></span>);
var sum = r.Step(<span style="color:#60E">7</span><span style="color:#60E">.0</span>).Take(<span style="color:#00D">3</span>).Sum();</pre></td>
</tr></table>

<p><br/>
And guess what, it works like a charm! <code>4711</code> is part of positive infinity and <code>sum</code> is 42.0 and all is good.</p>

<p><font style="color:red;font-weight:bold">Edit</font></p>

<p>There's also a couple of predefined constants. Thanks to Eric for pointing that out.</p>

<table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="4#n1" name="n1">1</a>
<a href="4#n2" name="n2">2</a>
</pre></td>
  <td class="code"><pre>var r = new Range&lt;<span style="color:#0a5;font-weight:bold">double</span>&gt;(<span style="color:#00D">7</span>,  System.Double.PositiveInfinity);
var sum = r.Step(<span style="color:#60E">7</span><span style="color:#60E">.0</span>).Take(<span style="color:#00D">3</span>).Sum();</pre></td>
</tr></table>

<p><br/></p>

      
  </div>

  <ul class="meta">
    <li class="categories">Posted in <a href="http://alicebobandmallory.com/articles/category/ruby" rel="noindex, follow, tag">Ruby</a>, <a href="http://alicebobandmallory.com/articles/category/c" rel="noindex, follow, tag">C#</a>, <a href="http://alicebobandmallory.com/articles/category/math" rel="noindex, follow, tag">Math</a></li>
    
    <li>Meta 
      
      <a href="../2009/10/20/infinite-ranges-in-c#comments">2 comments</a>,
      <a href="../2009/10/20/infinite-ranges-in-c" rel="bookmark">permalink</a>,
      <a href="../../xml/rss/article/3774/feed.xml">rss</a>,    
      <a href="../../xml/atom/article/3774/feed.xml">atom</a>   
    </li>
  </ul>
</div>


<p class="pagination">Older posts: <a href="1">1</a> <a href="2">2</a> <a href="3">3</a> 4 <a href="5">5</a> <a href="6">6</a>  ... <a href="12">12</a></p>

      <script type="text/javascript">
//<![CDATA[
show_dates_as_local_time()
//]]>
</script>
    </div>

    <div id="sidebar">
      <!-- search -->
      <div id="search" class="search">
<!--	<form action="/articles/search" id="sform" method="get">
	  <p><input type="text" id="q" name="q" value="" /></p>
	</form>
	
	<div id="loading" class="loading" style="display:none;">Searching...</div>
	<div id="results" class="results"></div>
  <script type="text/javascript">
//<![CDATA[
new Form.Element.Observer('q', 1, function(element, value) {new Ajax.Updater('results', '/live/search', {asynchronous:true, evalScripts:true, onComplete:function(request){Element.hide('loading')}, onLoading:function(request){Element.show('loading')}, parameters:'q=' + escape($F('q'))})})
//]]>
</script>
-->
</div>


      <!-- sidebar components -->
      
      
<div class="sidebar-node">
  <h3></h3>
<a href="http://stackoverflow.com/users/44620/jonas-elfstrom">
<img src="http://stackoverflow.com/users/flair/44620.png" width="208" height="58" alt="Stack Overflow profile for Jonas Elfström" title="Stack Overflow profile for Jonas Elfström">
</a>
<ul>
<li><nobr><a href="../../pages/AboutMe">About me</a>/<a href="../../pages/OmMig">Om mig</a></nobr></li>
</ul>
<a href="https://gist.github.com/jonelf">Public Gists</a><br><a href="http://jonelf.posterous.com/">Posterous</a><br><br>
<b>Recommended reading</b><br/><a href="http://www.amazon.com/gp/product/0385495323?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385495323">The Code Book</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385495323" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/>
<a href="http://www.amazon.com/gp/product/0385493622?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0385493622">Fermat's Enigma</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0385493622" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0399156828?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0399156828">Zero History</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0399156828" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br/>
<a href="http://www.amazon.com/gp/product/0470474246?ie=UTF8&tag=alibobandmal-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0470474246">Cryptography Engineering</a><img src="http://www.assoc-amazon.com/e/ir?t=alibobandmal-20&l=as2&o=1&a=0470474246" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<br/><br/>

</div>


  


    </div>
    <br style="clear:both;" />
  </div>

  <div id="footer">
    <hr />
    <p><a href="../../index.html">Alice, Bob, and Mallory</a></p>
    <ul>
      <li>powered by <a href="http://typosphere.org">typo</a> /
          styled with <a href="http://quotedprintable.com/pages/scribbish">scribbish</a></li>
    </ul>
  </div>
</div>
</body>
</html>
