<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/stylesheets/rss.css" type="text/css"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Alice, Bob, and Mallory: String concatenation in Ruby</title>
    <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>metasyntactics</description>
    <item>
      <title>String concatenation in Ruby</title>
      <description>&lt;p&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Knit-schematic.png/200px-Knit-schematic.png" style="display: inline-block; float:right"/&gt;
There's no &lt;code&gt;StringBuilder&lt;/code&gt; class in Ruby because the &lt;a href="http://ruby-doc.org/core/classes/String.html"&gt;String&lt;/a&gt; class has the &lt;a href="http://ruby-doc.org/core/classes/String.html#M000807"&gt;&amp;lt;&amp;lt;&lt;/a&gt; for appending. The problem is that not every Ruby programmer seems to be aware of it. Recently I've seen &lt;code&gt;+=&lt;/code&gt; being used to append to strings where &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; would have been a much better choice.&lt;/p&gt;

&lt;p&gt;The problem with using &lt;code&gt;+=&lt;/code&gt; is that it creates a new String instance and if you do that in a loop you can get really horrible performance.&lt;/p&gt;

&lt;p&gt;If you are dealing with an array you don't even have to use &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; because &lt;a href="http://ruby-doc.org/core/classes/Array.html#M002182"&gt;Array#join&lt;/a&gt; is even faster and shows intent in a nice way.&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;
&lt;a href="#n7" name="n7"&gt;7&lt;/a&gt;
&lt;a href="#n8" name="n8"&gt;8&lt;/a&gt;
&lt;a href="#n9" name="n9"&gt;9&lt;/a&gt;
&lt;strong&gt;&lt;a href="#n10" name="n10"&gt;10&lt;/a&gt;&lt;/strong&gt;
&lt;a href="#n11" name="n11"&gt;11&lt;/a&gt;
&lt;a href="#n12" name="n12"&gt;12&lt;/a&gt;
&lt;a href="#n13" name="n13"&gt;13&lt;/a&gt;
&lt;a href="#n14" name="n14"&gt;14&lt;/a&gt;
&lt;a href="#n15" name="n15"&gt;15&lt;/a&gt;
&lt;a href="#n16" name="n16"&gt;16&lt;/a&gt;
&lt;a href="#n17" name="n17"&gt;17&lt;/a&gt;
&lt;a href="#n18" name="n18"&gt;18&lt;/a&gt;
&lt;a href="#n19" name="n19"&gt;19&lt;/a&gt;
&lt;strong&gt;&lt;a href="#n20" name="n20"&gt;20&lt;/a&gt;&lt;/strong&gt;
&lt;a href="#n21" name="n21"&gt;21&lt;/a&gt;
&lt;a href="#n22" name="n22"&gt;22&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;require &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;benchmark&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt;

array_of_rnd_strings=(&lt;span style="color:#00D"&gt;0&lt;/span&gt;...&lt;span style="color:#00D"&gt;262144&lt;/span&gt;).map{&lt;span style="color:#00D"&gt;65&lt;/span&gt;.+(rand(&lt;span style="color:#00D"&gt;25&lt;/span&gt;)).chr}
                                 .join.scan(&lt;span style="background-color:hsla(300,100%,50%,0.06)"&gt;&lt;span style="color:#404"&gt;/&lt;/span&gt;&lt;span style="color:#808"&gt;.{1,8}&lt;/span&gt;&lt;span style="color:#404"&gt;/&lt;/span&gt;&lt;span style="color:#C2C"&gt;m&lt;/span&gt;&lt;/span&gt;)

&lt;span style="color:#036;font-weight:bold"&gt;Benchmark&lt;/span&gt;.bm &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt; |benchmark|
  benchmark.report &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt;
    str=array_of_rnd_strings.join
  &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
  benchmark.report &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt;
    str2=&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    array_of_rnd_strings.each &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt; |s|
      str2&amp;lt;&amp;lt;s
    &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
  &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
  benchmark.report &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt;
    str3=&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    array_of_rnd_strings.each &lt;span style="color:#080;font-weight:bold"&gt;do&lt;/span&gt; |s|
      str3+=s
    &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
  &lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;
&lt;span style="color:#080;font-weight:bold"&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;


The array_of_rnd_strings is an array of 32768 8 characters long random strings.
&lt;br/&gt;
&lt;br/&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;td&gt;&lt;b&gt;user&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;system&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;total&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;real&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;    
&lt;td&gt;0.030000&lt;/td&gt;&lt;td&gt;0.000000&lt;/td&gt;&lt;td&gt;0.030000&lt;/td&gt;&lt;td&gt;(  0.027184)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;0.160000&lt;/td&gt;&lt;td&gt;0.010000&lt;/td&gt;&lt;td&gt;0.170000&lt;/td&gt;&lt;td&gt;(  0.190277)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;106.020000&lt;/td&gt;&lt;td&gt;0.300000&lt;/td&gt;&lt;td&gt;106.320000&lt;/td&gt;&lt;td&gt;(113.457793)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The performance of &lt;code&gt;+=&lt;/code&gt; was even &lt;strong&gt;worse&lt;/strong&gt; than I imagined!&lt;/p&gt;</description>
      <pubDate>Tue, 02 Feb 2010 00:04:00 +0100</pubDate>
      <guid isPermaLink="false">urn:uuid:08c4064d-9cef-4bee-8988-ea89961d87a2</guid>
      <author>Jonas Elfstr√∂m</author>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby</link>
      <category>Ruby</category>
    </item>
    <item>
      <title>"String concatenation in Ruby" by Jonas</title>
      <description>&lt;p&gt;@sapphire Great explanation and I totally agree.&lt;/p&gt;</description>
      <pubDate>Fri, 17 Dec 2010 00:18:14 +0100</pubDate>
      <guid isPermaLink="false">urn:uuid:b1d3b766-161a-410e-a703-4e4ab642aae6</guid>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby#comment-5189</link>
    </item>
    <item>
      <title>"String concatenation in Ruby" by sapphire</title>
      <description>&lt;p&gt;just wanted to clarify that there are are different cases.
in your benchmarking, you measure the time to join an array, correctly concluding that the best method is join.&lt;/p&gt;

&lt;p&gt;however, join is not the universal method to join strings (as a ruby noob may think), so i put the stackoverflow hyperlink.&lt;/p&gt;

&lt;p&gt;so i you previously have strings in an array, then .join() them.
but if you have a discrete well-known number of strings (a, b and c), join them as:&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;a &amp;lt;&amp;lt; b &amp;lt;&amp;lt; c&lt;/p&gt;
    
    &lt;p&gt;&amp;#8221;#{a}#{b}#{c}&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;a + b + c&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but never compose an array and then join them&lt;/p&gt;

&lt;blockquote&gt;
    &lt;p&gt;[a,b,c].join&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;hope my point is clear now :)&lt;/p&gt;</description>
      <pubDate>Thu, 16 Dec 2010 16:52:12 +0100</pubDate>
      <guid isPermaLink="false">urn:uuid:06cbe7e4-a053-4f88-b6e6-3b3538e9fca9</guid>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby#comment-5188</link>
    </item>
    <item>
      <title>"String concatenation in Ruby" by Jonas</title>
      <description>&lt;p&gt;@sapphire I&amp;#8217;m not sure so I like that benchmark. The join example first builds an array and then joins. The concatenation example just concatenates &amp;#8220;foobar&amp;#8221; over and over. I can&amp;#8217;t really map that to a real world scenario. If you can, please show me.&lt;/p&gt;</description>
      <pubDate>Wed, 15 Dec 2010 23:22:46 +0100</pubDate>
      <guid isPermaLink="false">urn:uuid:408ad8fc-5939-45b5-be45-646ed0ddd7f0</guid>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby#comment-5187</link>
    </item>
    <item>
      <title>"String concatenation in Ruby" by sapphire</title>
      <description>&lt;p&gt;BUT, if our strings are a discrete and well known collection (they are not in an array), the proper method in terms of speed is &amp;lt;&amp;lt; or +, not join.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4402336/array-join-versus-string-concatenation-efficiency"&gt;http://stackoverflow.com/questions/4402336/array-join-versus-string-concatenation-efficiency&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 15 Dec 2010 12:26:08 +0100</pubDate>
      <guid isPermaLink="false">urn:uuid:675497ff-ad21-4008-b987-38e7b81b1754</guid>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby#comment-5185</link>
    </item>
    <item>
      <title>"String concatenation in Ruby" by Jimmy</title>
      <description>&lt;p&gt;Sweet&lt;/p&gt;</description>
      <pubDate>Tue, 06 Apr 2010 15:10:42 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:77a1b8c8-f175-4fb3-bd16-d308d1fd15e1</guid>
      <link>http://alicebobandmallory.com/articles/2010/02/02/string-concatenation-in-ruby#comment-4029</link>
    </item>
  </channel>
</rss>
