<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/stylesheets/rss.css" type="text/css"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Alice, Bob, and Mallory: Sudoku solver in CoffeeScript</title>
    <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>metasyntactics</description>
    <item>
      <title>Sudoku solver in CoffeeScript</title>
      <description>&lt;p&gt;&lt;a href="http://jashkenas.github.com/coffee-script/"&gt;CoffeeScript&lt;/a&gt; is inspired by Ruby and Python but what's most peculiar with it is that it compiles to JavaScript. The generated JavaScript isn't all that bad and it even passes &lt;a href="http://www.javascriptlint.com/"&gt;JavaScript lint&lt;/a&gt; without warnings.&lt;/p&gt;

&lt;p&gt;"Underneath all of those embarrassing braces and semicolons, JavaScript has always had a gorgeous object model at its heart." - Jeremy Ashkenas&lt;/p&gt;

&lt;p&gt;About a week ago I stumbled on the very clever &lt;a href="http://norvig.com/sudoku.html"&gt;Sudoku solver by Peter Norvig&lt;/a&gt;. I have nothing (or at least not much) against Python but I pretty soon checked out the Ruby translations of the solver. I then &lt;a href="https://gist.github.com/914326"&gt;refactored one&lt;/a&gt; of the solutions to get a chance to get to know the algorithm better.&lt;/p&gt;

&lt;p&gt;Now that I finally &lt;a href="http://jashkenas.github.com/coffee-script/#installation"&gt;installed CoffeeScript&lt;/a&gt; the Sudoku solver came to mind. I dived in head first and got in trouble pretty soon. It turns out that Array Comprehensions in CoffeeScript differs some from the List Comprehensions in Python.&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;&lt;span style="color:#080;font-weight:bold"&gt;def&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;cross&lt;/span&gt;(&lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt;, &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;):
       &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;span style="color:#D20"&gt;Cross product of elements in A and elements in B.&lt;/span&gt;&lt;span style="color:#710"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
       &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; [a+b &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; a &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; b &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;]&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;returns an one-dimensional array if you call it with two arrays (or strings).&lt;/p&gt;

&lt;p&gt;But in CoffeeScript &lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cross = (&lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt;, &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;) -&amp;gt; (a+b &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; a &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; b &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;)&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;returns a two-dimensional array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jashkenas/coffee-script/issues/1191"&gt;The jury&lt;/a&gt; is still out on &lt;a href="http://stackoverflow.com/questions/5685449/nested-array-comprehensions-in-coffeescript"&gt;if this is intended&lt;/a&gt; or not but either way the &lt;a href="http://en.wikipedia.org/wiki/List_comprehension"&gt;array  comprehensions&lt;/a&gt; in CoffeeScript are still very useful.&lt;/p&gt;

&lt;div style="background-color: #F0F0F0"&gt;
&lt;font color="red"&gt;EDIT 2011-06-02&lt;/font&gt;&lt;br&gt;
It's been decided that this is by design. The issue has been closed.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
 For the &lt;code&gt;cross&lt;/code&gt;-function I ended up with&lt;/p&gt;

&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;
&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;
&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;
&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cross = (&lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt;, &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;) -&amp;gt;
  results = []
  &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; a &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;A&lt;/span&gt;
    &lt;span style="color:#080;font-weight:bold"&gt;for&lt;/span&gt; b &lt;span style="color:#080;font-weight:bold"&gt;in&lt;/span&gt; &lt;span style="color:#036;font-weight:bold"&gt;B&lt;/span&gt;
      results.push a + b
  results&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;div style="background-color: #F0F0F0"&gt;
&lt;font color="red"&gt;EDIT 2011-06-02&lt;/font&gt;&lt;br&gt;
Using `map` I could have got much closer to the Ruby version.
&lt;table class="CodeRay"&gt;&lt;tr&gt;
  &lt;td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"&gt;&lt;pre&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;
&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;
&lt;/pre&gt;&lt;/td&gt;
  &lt;td class="code"&gt;&lt;pre&gt;cross = (cols, rows) -&amp;gt;
  [].concat (cols.map (x) -&amp;gt; rows.map (y) -&amp;gt; y+x)...&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

I'm still more of a map/reduce guy than a list comprehension ninja.
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
You can find the &lt;a href="https://gist.github.com/927782"&gt;CoffeScript Sudoku solver as a Gist&lt;/a&gt;. &lt;strike&gt;Compile it with&lt;br/&gt;
&lt;code&gt;coffee -c sudoku.coffee&lt;/code&gt;&lt;br/&gt;
and then run it with&lt;br/&gt;
&lt;code&gt;node sudoku.js&lt;/code&gt;&lt;/strike&gt;&lt;/p&gt;

&lt;p&gt;I don't know how I missed it but as Trevor pointed out below all you have to do is&lt;br/&gt;
&lt;code&gt;coffee sudoku.coffee&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
    1 2 3 4 5 6 7 8 9
  |------+-----+-----|
A | 4 8 3|9 2 1|6 5 7|
B | 9 6 7|3 4 5|8 2 1|
C | 2 5 1|8 7 6|4 9 3|
  |------+-----+-----|
D | 5 4 8|1 3 2|9 7 6|
E | 7 2 9|5 6 4|1 3 8|
F | 1 3 6|7 9 8|2 4 5|
  |------+-----+-----|
G | 3 7 2|6 8 9|5 1 4|
H | 8 1 4|2 5 3|7 6 9|
I | 6 9 5|4 1 7|3 8 2|
  |------+-----+-----|
&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://alicebobandmallory.com/sudoku.js.html"&gt;Here's&lt;/a&gt; the generated &lt;a href="http://alicebobandmallory.com/sudoku.js.html"&gt;sudoku.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the only CoffeeScript I've ever written but I already like it (more than JavaScript). Please correct me if I strayed from the CoffeeScript way. &lt;/p&gt;</description>
      <pubDate>Tue, 19 Apr 2011 15:46:00 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:12b7c916-c5eb-4510-ac0a-0efcfd241225</guid>
      <author>Jonas Elfström</author>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript</link>
      <category>Ruby</category>
      <category>JavaScript</category>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Jonas Elfström</title>
      <description>&lt;p&gt;The list comprehension issue has been reopened because of this post 
&lt;a href="http://brehaut.net/blog/2011/coffeescript_comprehensions"&gt;CoffeeScript Comprehensions Are Broken&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://brehaut.net/blog/2011/coffeescript_comprehensions_reply"&gt;A reply from Trevor Burnham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jashkenas/coffee-script/issues/1191#issuecomment-2081256"&gt;The issue&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 13 Sep 2011 16:02:21 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:dad4a185-f89c-4d42-a29d-570c81acec1e</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-6426</link>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Jakob Eriksson</title>
      <description>&lt;p&gt;I also think your blog is so wonderful to keep sight of! :-P&lt;/p&gt;

&lt;p&gt;Spambottarna smickrar, trevligt.&lt;/p&gt;</description>
      <pubDate>Wed, 25 May 2011 08:59:39 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:f7429c79-ed83-4059-81e9-db7d2ebf9695</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-5640</link>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Jonas Elfström</title>
      <description>&lt;p&gt;&amp;#8220;CoffeeScript is well done and more convenient to use than JS, provided you buy into the Python-esque significant space and the costs of generating JS from another source language. But semantically it’s still JS.&amp;#8221; - Brendan Eich &lt;a href="http://brendaneich.com/2011/01/harmony-of-my-dreams/"&gt;http://brendaneich.com/2011/01/harmony-of-my-dreams/&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 19 May 2011 20:49:27 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:4116aa92-8196-401e-b418-eb5f950aea5f</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-5617</link>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Jonas Elfström</title>
      <description>&lt;p&gt;I didn&amp;#8217;t write nearly enough about why I like CoffeeScript. Fortunately Trevor sums it up very good at &lt;a href="http://www.pragprog.com/magazines/2011-05/a-coffeescript-intervention"&gt;http://www.pragprog.com/magazines/2011-05/a-coffeescript-intervention&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 04 May 2011 21:32:59 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:c7bc0ec5-2055-4838-9465-6cab3ad3f5ca</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-5578</link>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Jonas Elfström</title>
      <description>&lt;p&gt;Didn&amp;#8217;t know that. Thanks!&lt;/p&gt;</description>
      <pubDate>Wed, 20 Apr 2011 21:35:18 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:e9c020f8-7db1-42e1-8ac5-a5e196fe6fbe</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-5492</link>
    </item>
    <item>
      <title>"Sudoku solver in CoffeeScript" by Trevor Burnham</title>
      <description>&lt;p&gt;Nice post. By the way, you can just do &lt;code&gt;coffee sudoku.coffee&lt;/code&gt; instead of &lt;code&gt;coffee -c sudoku.coffee; node sudoku.js&lt;/code&gt;.&lt;/p&gt;</description>
      <pubDate>Wed, 20 Apr 2011 21:01:01 +0200</pubDate>
      <guid isPermaLink="false">urn:uuid:cf5912f0-cc11-48f4-9067-815328fd3cef</guid>
      <link>http://alicebobandmallory.com/articles/2011/04/19/sudoku-solver-in-coffeescript#comment-5491</link>
    </item>
  </channel>
</rss>
